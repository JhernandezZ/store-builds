{
  "version": 3,
  "file": "ngxs-store.js",
  "sources": [
    "ng://@ngxs/store/packages/store/src/decorators/selector.ts",
    "ng://@ngxs/store/packages/store/src/decorators/state.ts",
    "ng://@ngxs/store/packages/store/src/decorators/action.ts",
    "ng://@ngxs/store/packages/store/src/module.ts",
    "ng://@ngxs/store/packages/store/src/actions/actions.ts",
    "ng://@ngxs/store/packages/store/src/decorators/select.ts",
    "ng://@ngxs/store/packages/store/src/store.ts",
    "ng://@ngxs/store/packages/store/src/utils/selector-utils.ts",
    "ng://@ngxs/store/packages/store/src/utils/memoize.ts",
    "ng://@ngxs/store/packages/store/src/internal/state-factory.ts",
    "ng://@ngxs/store/packages/store/src/internal/state-context-factory.ts",
    "ng://@ngxs/store/packages/store/src/internal/state-operations.ts",
    "ng://@ngxs/store/packages/store/src/utils/freeze.ts",
    "ng://@ngxs/store/packages/store/src/internal/dispatcher.ts",
    "ng://@ngxs/store/packages/store/src/plugin-manager.ts",
    "ng://@ngxs/store/packages/store/src/internal/state-stream.ts",
    "ng://@ngxs/store/packages/store/src/utils/compose.ts",
    "ng://@ngxs/store/packages/store/src/actions-stream.ts",
    "ng://@ngxs/store/packages/store/src/operators/zone.ts",
    "ng://@ngxs/store/packages/store/src/operators/of-action.ts",
    "ng://@ngxs/store/packages/store/src/utils/utils.ts",
    "ng://@ngxs/store/packages/store/src/internal/internals.ts",
    "ng://@ngxs/store/packages/store/src/symbols.ts"
  ],
  "sourcesContent": [
    "import { createSelector } from '../utils/selector-utils';\r\n\r\n/**\r\n * Decorator for memoizing a state selector.\r\n */\r\nexport function Selector(selectors?: any[]) {\r\n  return (target: any, key: string, descriptor: PropertyDescriptor) => {\r\n    if (descriptor.value !== null) {\r\n      const originalFn = descriptor.value;\r\n\r\n      const memoizedFn = createSelector(selectors, originalFn, { containerClass: target, selectorName: key });\r\n\r\n      return {\r\n        configurable: true,\r\n        get() {\r\n          return memoizedFn;\r\n        }\r\n      };\r\n    } else {\r\n      throw new Error('Selectors only work on methods');\r\n    }\r\n  };\r\n}\r\n",
    "import { ensureStoreMetadata } from '../internal/internals';\r\nimport { StoreOptions, META_KEY } from '../symbols';\r\n\r\nconst stateNameRegex = new RegExp('^[a-zA-Z0-9]+$');\r\n\r\n/**\r\n * Error message\r\n * @ignore\r\n */\r\nexport const stateNameErrorMessage = name =>\r\n  `${name} is not a valid state name. It needs to be a valid object property name.`;\r\n\r\n/**\r\n * Decorates a class with ngxs state information.\r\n */\r\nexport function State<T>(options: StoreOptions<T>) {\r\n  return function(target: any) {\r\n    const meta = ensureStoreMetadata(target);\r\n\r\n    // Handle inheritance\r\n    if (Object.getPrototypeOf(target).hasOwnProperty(META_KEY)) {\r\n      const parentMeta = Object.getPrototypeOf(target)[META_KEY];\r\n\r\n      meta.actions = {\r\n        ...meta.actions,\r\n        ...parentMeta.actions\r\n      };\r\n    }\r\n\r\n    meta.children = options.children;\r\n    meta.defaults = options.defaults;\r\n    meta.name = options.name;\r\n\r\n    if (!options.name) {\r\n      throw new Error(`States must register a 'name' property`);\r\n    }\r\n\r\n    if (!stateNameRegex.test(options.name)) {\r\n      throw new Error(stateNameErrorMessage(options.name));\r\n    }\r\n  };\r\n}\r\n",
    "import { ensureStoreMetadata } from '../internal/internals';\r\nimport { ActionOptions } from '../symbols';\r\n\r\n/**\r\n * Decorates a method with a action information.\r\n */\r\nexport function Action(actions: any | any[], options?: ActionOptions) {\r\n  return function(target: any, name: string, descriptor: TypedPropertyDescriptor<any>) {\r\n    const meta = ensureStoreMetadata(target.constructor);\r\n\r\n    if (!Array.isArray(actions)) {\r\n      actions = [actions];\r\n    }\r\n\r\n    for (const action of actions) {\r\n      const type = action.type;\r\n\r\n      if (!action.type) {\r\n        throw new Error(`Action ${action.name} is missing a static \"type\" property`);\r\n      }\r\n\r\n      if (!meta.actions[type]) {\r\n        meta.actions[type] = [];\r\n      }\r\n\r\n      meta.actions[type].push({\r\n        fn: name,\r\n        options: options || {},\r\n        type\r\n      });\r\n    }\r\n  };\r\n}\r\n",
    "import { NgModule, ModuleWithProviders, Optional, Inject, InjectionToken } from '@angular/core';\r\n\r\nimport { ROOT_STATE_TOKEN, FEATURE_STATE_TOKEN, NgxsConfig } from './symbols';\r\nimport { StateFactory } from './internal/state-factory';\r\nimport { StateContextFactory } from './internal/state-context-factory';\r\nimport { Actions, InternalActions } from './actions-stream';\r\nimport { InternalDispatcher, InternalDispatchedActionResults } from './internal/dispatcher';\r\nimport { InternalStateOperations } from './internal/state-operations';\r\nimport { Store } from './store';\r\nimport { SelectFactory } from './decorators/select';\r\nimport { StateStream } from './internal/state-stream';\r\nimport { PluginManager } from './plugin-manager';\r\nimport { InitState, UpdateState } from './actions/actions';\r\n\r\n/**\r\n * Root module\r\n * @ignore\r\n */\r\n@NgModule()\r\nexport class NgxsRootModule {\r\n  constructor(\r\n    factory: StateFactory,\r\n    internalStateOperations: InternalStateOperations,\r\n    store: Store,\r\n    select: SelectFactory,\r\n    @Optional()\r\n    @Inject(ROOT_STATE_TOKEN)\r\n    states: any[]\r\n  ) {\r\n    // add stores to the state graph and return their defaults\r\n    const results = factory.addAndReturnDefaults(states);\r\n\r\n    const stateOperations = internalStateOperations.getRootStateOperations();\r\n    if (results) {\r\n      // get our current stream\r\n      const cur = stateOperations.getState();\r\n\r\n      // set the state to the current + new\r\n      stateOperations.setState({ ...cur, ...results.defaults });\r\n    }\r\n\r\n    // connect our actions stream\r\n    factory.connectActionHandlers();\r\n\r\n    // dispatch the init action and invoke init function after\r\n    stateOperations.dispatch(new InitState()).subscribe(() => {\r\n      if (results) {\r\n        factory.invokeInit(results.states);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Feature module\r\n * @ignore\r\n */\r\n@NgModule({})\r\nexport class NgxsFeatureModule {\r\n  constructor(\r\n    store: Store,\r\n    internalStateOperations: InternalStateOperations,\r\n    factory: StateFactory,\r\n    @Optional()\r\n    @Inject(FEATURE_STATE_TOKEN)\r\n    states: any[][]\r\n  ) {\r\n    // Since FEATURE_STATE_TOKEN is a multi token, we need to\r\n    // flatten it [[Feature1State, Feature2State], [Feature3State]]\r\n    const flattenedStates = ([] as any[]).concat(...states);\r\n\r\n    // add stores to the state graph and return their defaults\r\n    const results = factory.addAndReturnDefaults(flattenedStates);\r\n\r\n    const stateOperations = internalStateOperations.getRootStateOperations();\r\n    if (results) {\r\n      // get our current stream\r\n      const cur = stateOperations.getState();\r\n\r\n      // set the state to the current + new\r\n      stateOperations.setState({ ...cur, ...results.defaults });\r\n    }\r\n\r\n    stateOperations.dispatch(new UpdateState()).subscribe(() => {\r\n      if (results) {\r\n        factory.invokeInit(results.states);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport type ModuleOptions = Partial<NgxsConfig>;\r\n\r\nexport function ngxsConfigFactory(options: ModuleOptions): NgxsConfig {\r\n  const config = Object.assign(new NgxsConfig(), options);\r\n  return config;\r\n}\r\n\r\nexport const ROOT_OPTIONS = new InjectionToken('ROOT_OPTIONS');\r\n\r\n/**\r\n * Ngxs Module\r\n */\r\n@NgModule({})\r\nexport class NgxsModule {\r\n  /**\r\n   * Root module factory\r\n   */\r\n  static forRoot(states: any[] = [], options: ModuleOptions = {}): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxsRootModule,\r\n      providers: [\r\n        StateFactory,\r\n        StateContextFactory,\r\n        Actions,\r\n        InternalActions,\r\n        InternalDispatcher,\r\n        InternalDispatchedActionResults,\r\n        InternalStateOperations,\r\n        Store,\r\n        StateStream,\r\n        SelectFactory,\r\n        PluginManager,\r\n        ...states,\r\n        {\r\n          provide: ROOT_STATE_TOKEN,\r\n          useValue: states\r\n        },\r\n        {\r\n          provide: ROOT_OPTIONS,\r\n          useValue: options\r\n        },\r\n        {\r\n          provide: NgxsConfig,\r\n          useFactory: ngxsConfigFactory,\r\n          deps: [ROOT_OPTIONS]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Feature module factory\r\n   */\r\n  static forFeature(states: any[]): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxsFeatureModule,\r\n      providers: [\r\n        StateFactory,\r\n        PluginManager,\r\n        ...states,\r\n        {\r\n          provide: FEATURE_STATE_TOKEN,\r\n          multi: true,\r\n          useValue: states\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n",
    "/**\r\n * Init action\r\n */\r\nexport class InitState {\r\n  static readonly type = '@@INIT';\r\n}\r\n\r\n/**\r\n * Update action\r\n */\r\nexport class UpdateState {\r\n  static readonly type = '@@UPDATE_STATE';\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\n\r\nimport { Store } from '../store';\r\nimport { fastPropGetter } from '../internal/internals';\r\nimport { META_KEY } from '../symbols';\r\n\r\n/**\r\n * Allows the select decorator to get access to the DI store.\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class SelectFactory {\r\n  static store: Store | undefined = undefined;\r\n  constructor(store: Store) {\r\n    SelectFactory.store = store;\r\n  }\r\n}\r\n\r\n/**\r\n * Decorator for selecting a slice of state from the store.\r\n */\r\nexport function Select(selectorOrFeature?, ...paths: string[]) {\r\n  return function(target: any, name: string) {\r\n    const selectorFnName = '__' + name + '__selector';\r\n\r\n    if (!selectorOrFeature) {\r\n      // if foo$ => make it just foo\r\n      selectorOrFeature = name.lastIndexOf('$') === name.length - 1 ? name.substring(0, name.length - 1) : name;\r\n    }\r\n\r\n    const createSelect = fn => {\r\n      const store = SelectFactory.store;\r\n\r\n      if (!store) {\r\n        throw new Error('SelectFactory not connected to store!');\r\n      }\r\n\r\n      return store.select(fn);\r\n    };\r\n\r\n    const createSelector = () => {\r\n      if (typeof selectorOrFeature === 'string') {\r\n        const propsArray = paths.length ? [selectorOrFeature, ...paths] : selectorOrFeature.split('.');\r\n\r\n        return fastPropGetter(propsArray);\r\n      } else if (selectorOrFeature[META_KEY] && selectorOrFeature[META_KEY].path) {\r\n        return fastPropGetter(selectorOrFeature[META_KEY].path.split('.'));\r\n      } else {\r\n        return selectorOrFeature;\r\n      }\r\n    };\r\n\r\n    if (target[selectorFnName]) {\r\n      throw new Error('You cannot use @Select decorator and a ' + selectorFnName + ' property.');\r\n    }\r\n\r\n    if (delete target[name]) {\r\n      Object.defineProperty(target, selectorFnName, {\r\n        writable: true,\r\n        enumerable: false,\r\n        configurable: true\r\n      });\r\n\r\n      Object.defineProperty(target, name, {\r\n        get: function() {\r\n          return this[selectorFnName] || (this[selectorFnName] = createSelect.apply(this, [createSelector()]));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n      });\r\n    }\r\n  };\r\n}\r\n",
    "import { Injectable, NgZone } from '@angular/core';\r\nimport { Observable, of, Subscription } from 'rxjs';\r\nimport { catchError, distinctUntilChanged, map, take } from 'rxjs/operators';\r\n\r\nimport { getSelectorFn } from './utils/selector-utils';\r\nimport { InternalStateOperations } from './internal/state-operations';\r\nimport { StateStream } from './internal/state-stream';\r\nimport { enterZone } from './operators/zone';\r\n\r\n@Injectable()\r\nexport class Store {\r\n  constructor(\r\n    private _ngZone: NgZone,\r\n    private _stateStream: StateStream,\r\n    private _internalStateOperations: InternalStateOperations\r\n  ) {}\r\n\r\n  /**\r\n   * Dispatches event(s).\r\n   */\r\n  dispatch(event: any | any[]): Observable<any> {\r\n    return this._internalStateOperations.getRootStateOperations().dispatch(event);\r\n  }\r\n\r\n  /**\r\n   * Selects a slice of data from the store.\r\n   */\r\n  select<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\r\n  select(selector: string | any): Observable<any>;\r\n  select(selector: any): Observable<any> {\r\n    const selectorFn = getSelectorFn(selector);\r\n    return this._stateStream.pipe(\r\n      map(selectorFn),\r\n      catchError(err => {\r\n        // if error is TypeError we swallow it to prevent usual errors with property access\r\n        if (err instanceof TypeError) {\r\n          return of(undefined);\r\n        }\r\n\r\n        // rethrow other errors\r\n        throw err;\r\n      }),\r\n      distinctUntilChanged(),\r\n      enterZone(this._ngZone)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Select one slice of data from the store.\r\n   */\r\n  selectOnce<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\r\n  selectOnce(selector: string | any): Observable<any>;\r\n  selectOnce(selector: any): Observable<any> {\r\n    return this.select(selector).pipe(take(1));\r\n  }\r\n\r\n  /**\r\n   * Select a snapshot from the state.\r\n   */\r\n  selectSnapshot<T>(selector: (state: any, ...states: any[]) => T): T;\r\n  selectSnapshot(selector: string | any): any;\r\n  selectSnapshot(selector: any): any {\r\n    const selectorFn = getSelectorFn(selector);\r\n    return selectorFn(this._stateStream.getValue());\r\n  }\r\n\r\n  /**\r\n   * Allow the user to subscribe to the root of the state\r\n   */\r\n  subscribe(fn?: any): Subscription {\r\n    return this._stateStream.pipe(enterZone(this._ngZone)).subscribe(fn);\r\n  }\r\n\r\n  /**\r\n   * Return the raw value of the state.\r\n   */\r\n  snapshot(): any {\r\n    return this._internalStateOperations.getRootStateOperations().getState();\r\n  }\r\n\r\n  /**\r\n   * Reset the state to a specific point in time. This method is useful\r\n   * for plugin's who need to modify the state directly or unit testing.\r\n   */\r\n  reset(state: any) {\r\n    return this._internalStateOperations.getRootStateOperations().setState(state);\r\n  }\r\n}\r\n",
    "import {\r\n  SelectFromState,\r\n  fastPropGetter,\r\n  ensureSelectorMetadata,\r\n  getSelectorMetadata,\r\n  getStoreMetadata\r\n} from '../internal/internals';\r\nimport { memoize } from '../utils/memoize';\r\n\r\n/**\r\n * Function for creating a selector\r\n * @param selectors The selectors to use to create the arguments of this function\r\n * @param originalFn The original function being made into a selector\r\n */\r\nexport function createSelector(\r\n  selectors: any[],\r\n  originalFn: any,\r\n  creationMetadata?: { containerClass: any; selectorName: string }\r\n) {\r\n  const wrappedFn = function wrappedSelectorFn(...args) {\r\n    const returnValue = originalFn(...args);\r\n    if (returnValue instanceof Function) {\r\n      const innerMemoizedFn = memoize.apply(null, [returnValue]);\r\n      return innerMemoizedFn;\r\n    }\r\n    return returnValue;\r\n  };\r\n  const memoizedFn = memoize(wrappedFn);\r\n  const containerClass = creationMetadata && creationMetadata.containerClass;\r\n\r\n  const fn = state => {\r\n    const results = [];\r\n\r\n    const selectorsToApply = [];\r\n\r\n    if (containerClass) {\r\n      // If we are on a state class, add it as the first selector parameter\r\n      const metadata = getStoreMetadata(containerClass);\r\n      if (metadata) {\r\n        selectorsToApply.push(containerClass);\r\n      }\r\n    }\r\n    if (selectors) {\r\n      selectorsToApply.push(...selectors);\r\n    }\r\n    // Determine arguments from the app state using the selectors\r\n    if (selectorsToApply) {\r\n      results.push(...selectorsToApply.map(a => getSelectorFn(a)(state)));\r\n    }\r\n\r\n    // if the lambda tries to access a something on the\r\n    // state that doesn't exist, it will throw a TypeError.\r\n    // since this is quite usual behaviour, we simply return undefined if so.\r\n    try {\r\n      return memoizedFn(...results);\r\n    } catch (ex) {\r\n      if (ex instanceof TypeError) {\r\n        return undefined;\r\n      }\r\n      throw ex;\r\n    }\r\n  };\r\n\r\n  const selectorMetaData = ensureSelectorMetadata(memoizedFn);\r\n  selectorMetaData.originalFn = originalFn;\r\n  selectorMetaData.selectFromAppState = fn;\r\n  if (creationMetadata) {\r\n    selectorMetaData.containerClass = creationMetadata.containerClass;\r\n    selectorMetaData.selectorName = creationMetadata.selectorName;\r\n  }\r\n  return memoizedFn;\r\n}\r\n\r\n/**\r\n * This function gets the selector function to be used to get the selected slice from the app state\r\n * @ignore\r\n */\r\nexport function getSelectorFn(selector: any): SelectFromState {\r\n  const selectorMetadata = getSelectorMetadata(selector);\r\n  if (selectorMetadata) {\r\n    const selectFromAppState = selectorMetadata.selectFromAppState;\r\n    if (selectFromAppState) {\r\n      return selectFromAppState;\r\n    }\r\n  }\r\n  const stateMetadata = getStoreMetadata(selector);\r\n  if (stateMetadata && stateMetadata.path) {\r\n    return fastPropGetter(stateMetadata.path.split('.'));\r\n  }\r\n  return selector;\r\n}\r\n",
    "function defaultEqualityCheck(a, b) {\r\n  return a === b;\r\n}\r\n\r\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\r\n  if (prev === null || next === null || prev.length !== next.length) {\r\n    return false;\r\n  }\r\n\r\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\r\n  const length = prev.length;\r\n  for (let i = 0; i < length; i++) {\r\n    if (!equalityCheck(prev[i], next[i])) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Memoize a function on its last inputs only.\r\n * Oringinally from: https://github.com/reduxjs/reselect/blob/master/src/index.js\r\n *\r\n * @ignore\r\n */\r\nexport function memoize(func, equalityCheck = defaultEqualityCheck) {\r\n  let lastArgs = null;\r\n  let lastResult = null;\r\n  // we reference arguments instead of spreading them for performance reasons\r\n  return <(...args) => any>function memoized() {\r\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\r\n      // apply arguments instead of spreading for performance.\r\n      lastResult = func.apply(null, arguments);\r\n    }\r\n\r\n    lastArgs = arguments;\r\n    return lastResult;\r\n  };\r\n}\r\n",
    "import { Injector, Injectable, SkipSelf, Optional } from '@angular/core';\r\nimport { Observable, of, forkJoin, from, throwError } from 'rxjs';\r\nimport { shareReplay, takeUntil, map, catchError, filter, mergeMap, defaultIfEmpty } from 'rxjs/operators';\r\n\r\nimport { META_KEY, NgxsLifeCycle } from '../symbols';\r\nimport {\r\n  topologicalSort,\r\n  buildGraph,\r\n  findFullParentPath,\r\n  nameToState,\r\n  isObject,\r\n  StateClass,\r\n  MappedStore\r\n} from './internals';\r\nimport { getActionTypeFromInstance, setValue } from '../utils/utils';\r\nimport { ofActionDispatched } from '../operators/of-action';\r\nimport { InternalActions, ActionStatus, ActionContext } from '../actions-stream';\r\nimport { InternalDispatchedActionResults } from '../internal/dispatcher';\r\nimport { StateContextFactory } from '../internal/state-context-factory';\r\n\r\n/**\r\n * State factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateFactory {\r\n  get states(): MappedStore[] {\r\n    return this._parentFactory ? this._parentFactory.states : this._states;\r\n  }\r\n\r\n  private _states: MappedStore[] = [];\r\n  private _connected = false;\r\n\r\n  constructor(\r\n    private _injector: Injector,\r\n    @Optional()\r\n    @SkipSelf()\r\n    private _parentFactory: StateFactory,\r\n    private _actions: InternalActions,\r\n    private _actionResults: InternalDispatchedActionResults,\r\n    private _stateContextFactory: StateContextFactory\r\n  ) {}\r\n\r\n  /**\r\n   * Add a new state to the global defs.\r\n   */\r\n  add(oneOrManyStateClasses: StateClass | StateClass[]): MappedStore[] {\r\n    let stateClasses: StateClass[];\r\n    if (!Array.isArray(oneOrManyStateClasses)) {\r\n      stateClasses = [oneOrManyStateClasses];\r\n    } else {\r\n      stateClasses = oneOrManyStateClasses;\r\n    }\r\n\r\n    const stateGraph = buildGraph(stateClasses);\r\n    const sortedStates = topologicalSort(stateGraph);\r\n    const depths = findFullParentPath(stateGraph);\r\n    const nameGraph = nameToState(stateClasses);\r\n    const mappedStores: MappedStore[] = [];\r\n\r\n    for (const name of sortedStates) {\r\n      const stateClass = nameGraph[name];\r\n\r\n      if (!stateClass[META_KEY]) {\r\n        throw new Error('States must be decorated with @State() decorator');\r\n      }\r\n\r\n      const depth = depths[name];\r\n      const { actions } = stateClass[META_KEY];\r\n      let { defaults } = stateClass[META_KEY];\r\n\r\n      stateClass[META_KEY].path = depth;\r\n\r\n      // ensure our store hasn't already been added\r\n      // but dont throw since it could be lazy\r\n      // loaded from different paths\r\n      const has = this.states.find(s => s.name === name);\r\n      if (!has) {\r\n        // create new instance of defaults\r\n        if (Array.isArray(defaults)) {\r\n          defaults = [...defaults];\r\n        } else if (isObject(defaults)) {\r\n          defaults = { ...defaults };\r\n        } else if (defaults === undefined) {\r\n          defaults = {};\r\n        }\r\n\r\n        const instance = this._injector.get(stateClass);\r\n\r\n        mappedStores.push({\r\n          actions,\r\n          instance,\r\n          defaults,\r\n          name,\r\n          depth\r\n        });\r\n      }\r\n    }\r\n\r\n    this.states.push(...mappedStores);\r\n\r\n    return mappedStores;\r\n  }\r\n\r\n  /**\r\n   * Add a set of states to the store and return the defaulsts\r\n   */\r\n  addAndReturnDefaults(stateClasses: any[]): { defaults: any; states: MappedStore[] } {\r\n    if (stateClasses) {\r\n      const states = this.add(stateClasses);\r\n      const defaults = states.reduce(\r\n        (result: any, meta: MappedStore) => setValue(result, meta.depth, meta.defaults),\r\n        {}\r\n      );\r\n      return { defaults, states };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Bind the actions to the handlers\r\n   */\r\n  connectActionHandlers() {\r\n    if (this._connected) return;\r\n    this._actions\r\n      .pipe(\r\n        filter((ctx: ActionContext) => ctx.status === ActionStatus.Dispatched),\r\n        mergeMap(({ action }) =>\r\n          this.invokeActions(this._actions, action).pipe(\r\n            map(() => <ActionContext>{ action, status: ActionStatus.Successful }),\r\n            defaultIfEmpty(<ActionContext>{ action, status: ActionStatus.Canceled }),\r\n            catchError(error => of(<ActionContext>{ action, status: ActionStatus.Errored, error }))\r\n          )\r\n        )\r\n      )\r\n      .subscribe(ctx => this._actionResults.next(ctx));\r\n    this._connected = true;\r\n  }\r\n\r\n  /**\r\n   * Invoke the init function on the states.\r\n   */\r\n  invokeInit(stateMetadatas: MappedStore[]) {\r\n    for (const metadata of stateMetadatas) {\r\n      const instance: NgxsLifeCycle = metadata.instance;\r\n\r\n      if (instance.ngxsOnInit) {\r\n        const stateContext = this.createStateContext(metadata);\r\n        instance.ngxsOnInit(stateContext);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Invoke actions on the states.\r\n   */\r\n  invokeActions(actions$: InternalActions, action) {\r\n    const results = [];\r\n\r\n    for (const metadata of this.states) {\r\n      const type = getActionTypeFromInstance(action);\r\n      const actionMetas = metadata.actions[type];\r\n\r\n      if (actionMetas) {\r\n        for (const actionMeta of actionMetas) {\r\n          const stateContext = this.createStateContext(metadata);\r\n          try {\r\n            let result = metadata.instance[actionMeta.fn](stateContext, action);\r\n\r\n            if (result instanceof Promise) {\r\n              result = from(result);\r\n            }\r\n\r\n            if (result instanceof Observable) {\r\n              result = result.pipe(\r\n                actionMeta.options.cancelUncompleted\r\n                  ? takeUntil(actions$.pipe(ofActionDispatched(action)))\r\n                  : map(r => r)\r\n              ); // map acts like a noop\r\n            } else {\r\n              result = of({}).pipe(shareReplay());\r\n            }\r\n\r\n            results.push(result);\r\n          } catch (e) {\r\n            results.push(throwError(e));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!results.length) {\r\n      results.push(of({}));\r\n    }\r\n\r\n    return forkJoin(results);\r\n  }\r\n\r\n  /**\r\n   * Create the state context\r\n   */\r\n  private createStateContext(metadata: MappedStore) {\r\n    return this._stateContextFactory.createStateContext(metadata);\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { StateContext } from '../symbols';\r\nimport { MappedStore } from '../internal/internals';\r\nimport { setValue, getValue } from '../utils/utils';\r\nimport { InternalStateOperations } from '../internal/state-operations';\r\n\r\n/**\r\n * State Context factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateContextFactory {\r\n  constructor(private _internalStateOperations: InternalStateOperations) {}\r\n\r\n  /**\r\n   * Create the state context\r\n   */\r\n  createStateContext(metadata: MappedStore): StateContext<any> {\r\n    const root = this._internalStateOperations.getRootStateOperations();\r\n    return {\r\n      getState(): any {\r\n        const state = root.getState();\r\n        return getValue(state, metadata.depth);\r\n      },\r\n      patchState(val: any): any {\r\n        const isArray = Array.isArray(val);\r\n        const isPrimitive = typeof val !== 'object';\r\n\r\n        if (isArray) {\r\n          throw new Error('Patching arrays is not supported.');\r\n        } else if (isPrimitive) {\r\n          throw new Error('Patching primitives is not supported.');\r\n        }\r\n\r\n        const state = root.getState();\r\n        const local = getValue(state, metadata.depth);\r\n        const clone = { ...local };\r\n\r\n        for (const k in val) {\r\n          clone[k] = val[k];\r\n        }\r\n\r\n        const newState = setValue(state, metadata.depth, clone);\r\n        root.setState(newState);\r\n        return newState;\r\n      },\r\n      setState(val: any): any {\r\n        let state = root.getState();\r\n        state = setValue(state, metadata.depth, val);\r\n        root.setState(state);\r\n        return state;\r\n      },\r\n      dispatch(actions: any | any[]): Observable<any> {\r\n        return root.dispatch(actions);\r\n      }\r\n    };\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\n\r\nimport { StateOperations } from '../internal/internals';\r\nimport { InternalDispatcher } from '../internal/dispatcher';\r\nimport { StateStream } from './state-stream';\r\nimport { NgxsConfig } from '../symbols';\r\nimport { deepFreeze } from '../utils/freeze';\r\n\r\n/**\r\n * State Context factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class InternalStateOperations {\r\n  constructor(\r\n    private _stateStream: StateStream,\r\n    private _dispatcher: InternalDispatcher,\r\n    private _config: NgxsConfig\r\n  ) {}\r\n\r\n  /**\r\n   * Returns the root state operators.\r\n   */\r\n  getRootStateOperations(): StateOperations<any> {\r\n    const rootStateOperations = {\r\n      getState: () => this._stateStream.getValue(),\r\n      setState: newState => this._stateStream.next(newState),\r\n      dispatch: actions => this._dispatcher.dispatch(actions)\r\n    };\r\n\r\n    if (this._config.developmentMode) {\r\n      return this.ensureStateAndActionsAreImmutable(rootStateOperations);\r\n    }\r\n\r\n    return rootStateOperations;\r\n  }\r\n\r\n  private ensureStateAndActionsAreImmutable(root: StateOperations<any>): StateOperations<any> {\r\n    return {\r\n      getState: () => root.getState(),\r\n      setState: value => {\r\n        const frozenValue = deepFreeze(value);\r\n        return root.setState(frozenValue);\r\n      },\r\n      dispatch: actions => {\r\n        return root.dispatch(actions);\r\n      }\r\n    };\r\n  }\r\n}\r\n",
    "/**\r\n * Object freeze code\r\n * https://github.com/jsdf/deep-freeze\r\n */\r\nexport const deepFreeze = o => {\r\n  Object.freeze(o);\r\n\r\n  const oIsFunction = typeof o === 'function';\r\n  const hasOwnProp = Object.prototype.hasOwnProperty;\r\n\r\n  Object.getOwnPropertyNames(o).forEach(function(prop) {\r\n    if (\r\n      hasOwnProp.call(o, prop) &&\r\n      (oIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true) &&\r\n      o[prop] !== null &&\r\n      (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\r\n      !Object.isFrozen(o[prop])\r\n    ) {\r\n      deepFreeze(o[prop]);\r\n    }\r\n  });\r\n\r\n  return o;\r\n};\r\n",
    "import { Injectable, ErrorHandler, NgZone } from '@angular/core';\r\nimport { Observable, of, forkJoin, empty, Subject, throwError } from 'rxjs';\r\nimport { shareReplay, filter, exhaustMap, take } from 'rxjs/operators';\r\n\r\nimport { compose } from '../utils/compose';\r\nimport { InternalActions, ActionStatus, ActionContext } from '../actions-stream';\r\nimport { StateStream } from './state-stream';\r\nimport { PluginManager } from '../plugin-manager';\r\nimport { enterZone } from '../operators/zone';\r\n\r\n/**\r\n * Internal Action result stream that is emitted when an action is completed.\r\n * This is used as a method of returning the action result to the dispatcher\r\n * for the observable returned by the dispatch(...) call.\r\n * The dispatcher then asynchronously pushes the result from this stream onto the main action stream as a result.\r\n */\r\n@Injectable()\r\nexport class InternalDispatchedActionResults extends Subject<ActionContext> {}\r\n\r\n@Injectable()\r\nexport class InternalDispatcher {\r\n  constructor(\r\n    private _errorHandler: ErrorHandler,\r\n    private _actions: InternalActions,\r\n    private _actionResults: InternalDispatchedActionResults,\r\n    private _pluginManager: PluginManager,\r\n    private _stateStream: StateStream,\r\n    private _ngZone: NgZone\r\n  ) {}\r\n\r\n  /**\r\n   * Dispatches event(s).\r\n   */\r\n  dispatch(event: any | any[]): Observable<any> {\r\n    const result: Observable<any> = this._ngZone.runOutsideAngular(() => {\r\n      if (Array.isArray(event)) {\r\n        return forkJoin(event.map(a => this.dispatchSingle(a)));\r\n      } else {\r\n        return this.dispatchSingle(event);\r\n      }\r\n    });\r\n\r\n    result.subscribe({\r\n      error: error => this._ngZone.run(() => this._errorHandler.handleError(error))\r\n    });\r\n\r\n    return result.pipe(enterZone(this._ngZone));\r\n  }\r\n\r\n  private dispatchSingle(action: any): Observable<any> {\r\n    const prevState = this._stateStream.getValue();\r\n    const plugins = this._pluginManager.plugins;\r\n\r\n    return (compose([\r\n      ...plugins,\r\n      (nextState, nextAction) => {\r\n        if (nextState !== prevState) {\r\n          this._stateStream.next(nextState);\r\n        }\r\n        const actionResult$ = this.getActionResultStream(nextAction);\r\n        actionResult$.subscribe(ctx => this._actions.next(ctx));\r\n        this._actions.next({ action: nextAction, status: ActionStatus.Dispatched });\r\n        return this.createDispatchObservable(actionResult$);\r\n      }\r\n    ])(prevState, action) as Observable<any>).pipe(shareReplay());\r\n  }\r\n\r\n  private getActionResultStream(action: any): Observable<ActionContext> {\r\n    return this._actionResults.pipe(\r\n      filter((ctx: ActionContext) => ctx.action === action && ctx.status !== ActionStatus.Dispatched),\r\n      take(1),\r\n      shareReplay()\r\n    );\r\n  }\r\n\r\n  private createDispatchObservable(actionResult$: Observable<ActionContext>): Observable<any> {\r\n    return actionResult$\r\n      .pipe(\r\n        exhaustMap((ctx: ActionContext) => {\r\n          switch (ctx.status) {\r\n            case ActionStatus.Successful:\r\n              return of(this._stateStream.getValue());\r\n            case ActionStatus.Errored:\r\n              return throwError(ctx.error);\r\n            default:\r\n              return empty();\r\n          }\r\n        })\r\n      )\r\n      .pipe(shareReplay());\r\n  }\r\n}\r\n",
    "import { Injectable, Optional, SkipSelf, Inject } from '@angular/core';\r\nimport { NgxsPluginFn, NGXS_PLUGINS, NgxsPlugin } from './symbols';\r\n\r\n/**\r\n * Plugin manager class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class PluginManager {\r\n  plugins: NgxsPluginFn[] = [];\r\n\r\n  constructor(\r\n    @Optional()\r\n    @SkipSelf()\r\n    private _parentManager: PluginManager,\r\n    @Inject(NGXS_PLUGINS)\r\n    @Optional()\r\n    private _plugins: NgxsPlugin[]\r\n  ) {\r\n    this.register();\r\n  }\r\n\r\n  private register() {\r\n    if (!this._plugins) {\r\n      return;\r\n    }\r\n\r\n    this.plugins = this._plugins.map(plugin => {\r\n      if (plugin.handle) {\r\n        return plugin.handle.bind(plugin);\r\n      } else {\r\n        return plugin;\r\n      }\r\n    });\r\n\r\n    if (this._parentManager) {\r\n      this._parentManager.plugins.push(...this.plugins);\r\n    }\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n/**\r\n * BehaviorSubject of the entire state.\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateStream extends BehaviorSubject<any> {\r\n  constructor() {\r\n    super({});\r\n  }\r\n}\r\n",
    "/**\r\n * Composes a array of functions from left to right. Example:\r\n *\r\n *      compose([fn, final])(state, action);\r\n *\r\n * then the funcs have a signature like:\r\n *\r\n *      function fn (state, action, next) {\r\n *          console.log('here', state, action, next);\r\n *          return next(state, action);\r\n *      }\r\n *\r\n *      function final (state, action) {\r\n *          console.log('here', state, action);\r\n *          return state;\r\n *      }\r\n *\r\n * the last function should not call `next`.\r\n *\r\n * @ignore\r\n */\r\nexport const compose = funcs => (...args) => {\r\n  const curr = funcs.shift();\r\n  return curr(...args, (...nextArgs) => compose(funcs)(...nextArgs));\r\n};\r\n",
    "import { Injectable, NgZone } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nimport { enterZone } from './operators/zone';\r\n\r\n/**\r\n * Status of a dispatched action\r\n */\r\nexport const enum ActionStatus {\r\n  Dispatched = 'DISPATCHED',\r\n  Successful = 'SUCCESSFUL',\r\n  Canceled = 'CANCELED',\r\n  Errored = 'ERRORED'\r\n}\r\n\r\nexport interface ActionContext {\r\n  status: ActionStatus;\r\n  action: any;\r\n  error?: Error;\r\n}\r\n\r\n/**\r\n * Custom Subject that ensures that subscribers are notified of values in the order that they arrived.\r\n * A standard Subject does not have this guarantee.\r\n * For example, given the following code:\r\n * ```typescript\r\n *   const subject = new Subject<string>();\r\n     subject.subscribe(value => {\r\n       if (value === 'start') subject.next('end');\r\n     });\r\n     subject.subscribe(value => { });\r\n     subject.next('start');\r\n * ```\r\n * When `subject` is a standard `Subject<T>` the second subscriber would recieve `end` and then `start`.\r\n * When `subject` is a `OrderedSubject<T>` the second subscriber would recieve `start` and then `end`.\r\n */\r\nexport class OrderedSubject<T> extends Subject<T> {\r\n  private _itemQueue: T[] = [];\r\n  private _busyPushingNext = false;\r\n\r\n  next(value?: T): void {\r\n    if (this._busyPushingNext) {\r\n      this._itemQueue.unshift(value);\r\n      return;\r\n    }\r\n    this._busyPushingNext = true;\r\n    super.next(value);\r\n    while (this._itemQueue.length > 0) {\r\n      const nextValue = this._itemQueue.pop();\r\n      super.next(nextValue);\r\n    }\r\n    this._busyPushingNext = false;\r\n  }\r\n}\r\n\r\n/**\r\n * Internal Action stream that is emitted anytime an action is dispatched.\r\n */\r\n@Injectable()\r\nexport class InternalActions extends OrderedSubject<ActionContext> {}\r\n\r\n/**\r\n * Action stream that is emitted anytime an action is dispatched.\r\n *\r\n * You can listen to this in services to react without stores.\r\n */\r\n@Injectable()\r\nexport class Actions extends Observable<any> {\r\n  constructor(actions$: InternalActions, ngZone: NgZone) {\r\n    super(observer => {\r\n      actions$\r\n        .pipe(enterZone(ngZone))\r\n        .subscribe(res => observer.next(res), err => observer.error(err), () => observer.complete());\r\n    });\r\n  }\r\n}\r\n",
    "import { Observable, Observer } from 'rxjs';\r\nimport { NgZone } from '@angular/core';\r\n\r\n/**\r\n * Operator to run the `subscribe` in a Angular zone.\r\n */\r\nexport function enterZone<T>(zone: NgZone) {\r\n  return (source: Observable<T>) => {\r\n    return new Observable((sink: Observer<T>) => {\r\n      return source.subscribe({\r\n        next(x) {\r\n          zone.run(() => sink.next(x));\r\n        },\r\n        error(e) {\r\n          zone.run(() => sink.error(e));\r\n        },\r\n        complete() {\r\n          zone.run(() => sink.complete());\r\n        }\r\n      });\r\n    });\r\n  };\r\n}\r\n",
    "import { OperatorFunction, Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\nimport { getActionTypeFromInstance } from '../utils/utils';\r\nimport { ActionContext, ActionStatus } from '../actions-stream';\r\n\r\nexport function ofAction<T>(allowedType): OperatorFunction<any, T>;\r\nexport function ofAction<T>(...allowedTypes): OperatorFunction<any, T>;\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will grab actions that have just been dispatched as well as actions that have completed\r\n */\r\nexport function ofAction(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been dispatched\r\n */\r\nexport function ofActionDispatched(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, ActionStatus.Dispatched);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been successfully completed\r\n */\r\nexport function ofActionSuccessful(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, ActionStatus.Successful);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been canceled\r\n */\r\nexport function ofActionCanceled(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, ActionStatus.Canceled);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just thrown an error\r\n */\r\nexport function ofActionErrored(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, ActionStatus.Errored);\r\n}\r\n\r\nfunction ofActionOperator(allowedTypes: any[], status?: ActionStatus) {\r\n  const allowedMap = createAllowedMap(allowedTypes);\r\n  return function(o: Observable<any>) {\r\n    return o.pipe(filterStatus(allowedMap, status), mapAction());\r\n  };\r\n}\r\n\r\nfunction filterStatus(allowedTypes: { [key: string]: boolean }, status?: ActionStatus) {\r\n  return filter((ctx: ActionContext) => {\r\n    const actionType = getActionTypeFromInstance(ctx.action);\r\n    const type = allowedTypes[actionType];\r\n    return status ? type && ctx.status === status : type;\r\n  });\r\n}\r\n\r\nfunction mapAction() {\r\n  return map((ctx: ActionContext) => ctx.action);\r\n}\r\n\r\nfunction createAllowedMap(types: any[]): { [key: string]: boolean } {\r\n  return types.reduce((acc: any, klass: any) => {\r\n    acc[getActionTypeFromInstance(klass)] = true;\r\n    return acc;\r\n  }, {});\r\n}\r\n",
    "/**\r\n * Returns the type from an action instance.\r\n * @ignore\r\n */\r\nexport function getActionTypeFromInstance(action: any): string {\r\n  if (action.constructor && action.constructor.type) {\r\n    return action.constructor.type;\r\n  }\r\n\r\n  return action.type;\r\n}\r\n\r\n/**\r\n * Matches a action\r\n * @ignore\r\n */\r\nexport function actionMatcher(action1: any) {\r\n  const type1 = getActionTypeFromInstance(action1);\r\n\r\n  return function(action2: any) {\r\n    return type1 === getActionTypeFromInstance(action2);\r\n  };\r\n}\r\n\r\n/**\r\n * Set a deeply nested value. Example:\r\n *\r\n *   setValue({ foo: { bar: { eat: false } } },\r\n *      'foo.bar.eat', true) //=> { foo: { bar: { eat: true } } }\r\n *\r\n * While it traverses it also creates new objects from top down.\r\n *\r\n * @ignore\r\n */\r\nexport const setValue = (obj: any, prop: string, val: any) => {\r\n  obj = { ...obj };\r\n\r\n  const split = prop.split('.');\r\n  const lastIndex = split.length - 1;\r\n\r\n  split.reduce((acc, part, index) => {\r\n    if (index === lastIndex) {\r\n      acc[part] = val;\r\n    } else {\r\n      acc[part] = { ...acc[part] };\r\n    }\r\n\r\n    return acc && acc[part];\r\n  }, obj);\r\n\r\n  return obj;\r\n};\r\n\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * @ignore\r\n */\r\nexport const getValue = (obj: any, prop: string) =>\r\n  prop.split('.').reduce((acc: any, part: string) => acc && acc[part], obj);\r\n",
    "import { META_KEY, ActionOptions, SELECTOR_META_KEY } from '../symbols';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface ObjectKeyMap<T> {\r\n  [key: string]: T;\r\n}\r\n\r\nexport interface StateClass {\r\n  [META_KEY]?: MetaDataModel;\r\n}\r\n\r\nexport type StateKeyGraph = ObjectKeyMap<string[]>;\r\n\r\nexport interface ActionHandlerMetaData {\r\n  fn: string;\r\n  options: ActionOptions;\r\n  type: string;\r\n}\r\n\r\nexport interface StateOperations<T> {\r\n  getState(): T;\r\n  setState(val: T);\r\n  dispatch(actions: any | any[]): Observable<void>;\r\n}\r\n\r\nexport interface MetaDataModel {\r\n  name: string;\r\n  actions: ObjectKeyMap<ActionHandlerMetaData[]>;\r\n  defaults: any;\r\n  path: string;\r\n  children: StateClass[];\r\n  instance: any;\r\n}\r\n\r\nexport type SelectFromState = (state: any) => any;\r\n\r\nexport interface SelectorMetaDataModel {\r\n  selectFromAppState: SelectFromState;\r\n  originalFn: Function;\r\n  containerClass: any;\r\n  selectorName: string;\r\n}\r\n\r\nexport interface MappedStore {\r\n  name: string;\r\n  actions: ObjectKeyMap<ActionHandlerMetaData[]>;\r\n  defaults: any;\r\n  instance: any;\r\n  depth: string;\r\n}\r\n\r\n/**\r\n * Ensures metadata is attached to the class and returns it.\r\n *\r\n * @ignore\r\n */\r\nexport function ensureStoreMetadata(target): MetaDataModel {\r\n  if (!target.hasOwnProperty(META_KEY)) {\r\n    const defaultMetadata: MetaDataModel = {\r\n      name: null,\r\n      actions: {},\r\n      defaults: {},\r\n      path: null,\r\n      children: [],\r\n      instance: null\r\n    };\r\n\r\n    Object.defineProperty(target, META_KEY, { value: defaultMetadata });\r\n  }\r\n  return getStoreMetadata(target);\r\n}\r\n\r\n/**\r\n * Get the metadata attached to the class if it exists.\r\n *\r\n * @ignore\r\n */\r\nexport function getStoreMetadata(target): MetaDataModel {\r\n  return target[META_KEY];\r\n}\r\n\r\n/**\r\n * Ensures metadata is attached to the selector and returns it.\r\n *\r\n * @ignore\r\n */\r\nexport function ensureSelectorMetadata(target): SelectorMetaDataModel {\r\n  if (!target.hasOwnProperty(SELECTOR_META_KEY)) {\r\n    const defaultMetadata: SelectorMetaDataModel = {\r\n      selectFromAppState: null,\r\n      originalFn: null,\r\n      containerClass: null,\r\n      selectorName: null\r\n    };\r\n\r\n    Object.defineProperty(target, SELECTOR_META_KEY, { value: defaultMetadata });\r\n  }\r\n\r\n  return getSelectorMetadata(target);\r\n}\r\n\r\n/**\r\n * Get the metadata attached to the selector if it exists.\r\n *\r\n * @ignore\r\n */\r\nexport function getSelectorMetadata(target): SelectorMetaDataModel {\r\n  return target[SELECTOR_META_KEY];\r\n}\r\n\r\n/**\r\n * The generated function is faster than:\r\n * - pluck (Observable operator)\r\n * - memoize\r\n *\r\n * @ignore\r\n */\r\nexport function fastPropGetter(paths: string[]): (x: any) => any {\r\n  const segments = paths;\r\n  let seg = 'store.' + segments[0];\r\n  let i = 0;\r\n  const l = segments.length;\r\n\r\n  let expr = seg;\r\n  while (++i < l) {\r\n    expr = expr + ' && ' + (seg = seg + '.' + segments[i]);\r\n  }\r\n\r\n  const fn = new Function('store', 'return ' + expr + ';');\r\n\r\n  return <(x: any) => any>fn;\r\n}\r\n\r\n/**\r\n * Given an array of states, it will return a object graph. Example:\r\n *    const states = [\r\n *      Cart,\r\n *      CartSaved,\r\n *      CartSavedItems\r\n *    ]\r\n *\r\n * would return:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function buildGraph(stateClasses: StateClass[]): StateKeyGraph {\r\n  const findName = (stateClass: StateClass) => {\r\n    const meta = stateClasses.find(g => g === stateClass);\r\n    if (!meta) {\r\n      throw new Error(`Child state not found: ${stateClass}`);\r\n    }\r\n\r\n    if (!meta[META_KEY]) {\r\n      throw new Error('States must be decorated with @State() decorator');\r\n    }\r\n\r\n    return meta[META_KEY].name;\r\n  };\r\n\r\n  return stateClasses.reduce<StateKeyGraph>((result: StateKeyGraph, stateClass: StateClass) => {\r\n    if (!stateClass[META_KEY]) {\r\n      throw new Error('States must be decorated with @State() decorator');\r\n    }\r\n\r\n    const { name, children } = stateClass[META_KEY];\r\n    result[name] = (children || []).map(findName);\r\n    return result;\r\n  }, {});\r\n}\r\n\r\n/**\r\n * Given a states array, returns object graph\r\n * returning the name and state metadata. Example:\r\n *\r\n *  const graph = {\r\n *    cart: { metadata }\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function nameToState(states: StateClass[]): ObjectKeyMap<StateClass> {\r\n  return states.reduce<ObjectKeyMap<StateClass>>((result: ObjectKeyMap<StateClass>, stateClass: StateClass) => {\r\n    if (!stateClass[META_KEY]) {\r\n      throw new Error('States must be decorated with @State() decorator');\r\n    }\r\n\r\n    const meta = stateClass[META_KEY];\r\n    result[meta.name] = stateClass;\r\n    return result;\r\n  }, {});\r\n}\r\n\r\n/**\r\n * Given a object relationship graph will return the full path\r\n * for the child items. Example:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * would return:\r\n *\r\n *  const r = {\r\n *    cart: 'cart',\r\n *    saved: 'cart.saved',\r\n *    items: 'cart.saved.items'\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function findFullParentPath(obj: StateKeyGraph, newObj: ObjectKeyMap<string> = {}): ObjectKeyMap<string> {\r\n  const visit = (child: StateKeyGraph, keyToFind: string): string => {\r\n    for (const key in child) {\r\n      if (child.hasOwnProperty(key) && child[key].indexOf(keyToFind) >= 0) {\r\n        const parent = visit(child, key);\r\n        return parent !== null ? `${parent}.${key}` : key;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  for (const key in obj) {\r\n    if (obj.hasOwnProperty(key)) {\r\n      const parent = visit(obj, key);\r\n      newObj[key] = parent ? `${parent}.${key}` : key;\r\n    }\r\n  }\r\n\r\n  return newObj;\r\n}\r\n\r\n/**\r\n * Given a object graph, it will return the items topologically sorted Example:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * would return:\r\n *\r\n *  const results = [\r\n *    'items',\r\n *    'saved',\r\n *    'cart'\r\n *  ];\r\n *\r\n * @ignore\r\n */\r\nexport function topologicalSort(graph: StateKeyGraph): string[] {\r\n  const sorted: string[] = [];\r\n  const visited: ObjectKeyMap<boolean> = {};\r\n\r\n  const visit = (name: string, ancestors: string[] = []) => {\r\n    if (!Array.isArray(ancestors)) {\r\n      ancestors = [];\r\n    }\r\n\r\n    ancestors.push(name);\r\n    visited[name] = true;\r\n\r\n    graph[name].forEach((dep: string) => {\r\n      if (ancestors.indexOf(dep) >= 0) {\r\n        throw new Error(`Circular dependency '${dep}' is required by '${name}': ${ancestors.join(' -> ')}`);\r\n      }\r\n\r\n      if (visited[dep]) {\r\n        return;\r\n      }\r\n\r\n      visit(dep, ancestors.slice(0));\r\n    });\r\n\r\n    if (sorted.indexOf(name) < 0) {\r\n      sorted.push(name);\r\n    }\r\n  };\r\n\r\n  Object.keys(graph).forEach(k => visit(k));\r\n\r\n  return sorted.reverse();\r\n}\r\n\r\n/**\r\n * Returns if the parameter is a object or not.\r\n *\r\n * @ignore\r\n */\r\nexport function isObject(obj) {\r\n  return (typeof obj === 'object' && obj !== null) || typeof obj === 'function';\r\n}\r\n",
    "import { InjectionToken } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport const ROOT_STATE_TOKEN = new InjectionToken<any>('ROOT_STATE_TOKEN');\r\nexport const FEATURE_STATE_TOKEN = new InjectionToken<any>('FEATURE_STATE_TOKEN');\r\nexport const META_KEY = 'NGXS_META';\r\nexport const SELECTOR_META_KEY = 'NGXS_SELECTOR_META';\r\n\r\nexport const NGXS_PLUGINS = new InjectionToken('NGXS_PLUGINS');\r\nexport type NgxsPluginConstructor = new (...args: any[]) => NgxsPlugin;\r\nexport type NgxsPluginFn = (state: any, mutation: any, next: NgxsNextPluginFn) => any;\r\n\r\n/**\r\n * The NGXS config settings.\r\n */\r\nexport class NgxsConfig {\r\n  /**\r\n   * Run in development mode. This will add additional debugging features:\r\n   * - Object.freeze on the state and actions to guarantee immutability\r\n   * (default: false)\r\n   */\r\n  developmentMode: boolean;\r\n}\r\n\r\n/**\r\n * State context provided to the actions in the state.\r\n */\r\nexport interface StateContext<T> {\r\n  /**\r\n   * Get the current state.\r\n   */\r\n  getState(): T;\r\n\r\n  /**\r\n   * Reset the state to a new value.\r\n   */\r\n  setState(val: T);\r\n\r\n  /**\r\n   * Patch the existing state with the provided value.\r\n   */\r\n  patchState(val: Partial<T>);\r\n\r\n  /**\r\n   * Dispatch a new action and return the dispatched observable.\r\n   */\r\n  dispatch(actions: any | any[]): Observable<void>;\r\n}\r\n\r\nexport type NgxsNextPluginFn = (state: any, mutation: any) => any;\r\n\r\n/**\r\n * Plugin interface\r\n */\r\nexport interface NgxsPlugin {\r\n  /**\r\n   * Handle the state/action before its submitted to the state handlers.\r\n   */\r\n  handle(state: any, action: any, next: NgxsNextPluginFn): any;\r\n}\r\n\r\n/**\r\n * Options that can be provided to the store.\r\n */\r\nexport interface StoreOptions<T> {\r\n  /**\r\n   * Name of the state. Required.\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * Default values for the state. If not provided, uses empty object.\r\n   */\r\n  defaults?: T;\r\n\r\n  /**\r\n   * Sub states for the given state.\r\n   */\r\n  children?: any[];\r\n}\r\n\r\n/**\r\n * Actions that can be provided in a action decorator.\r\n */\r\nexport interface ActionOptions {\r\n  /**\r\n   * Cancel the previous uncompleted observable(s).\r\n   */\r\n  cancelUncompleted?: boolean;\r\n}\r\n\r\n/**\r\n * On init interface\r\n */\r\nexport interface NgxsOnInit {\r\n  ngxsOnInit(ctx?: StateContext<any>): void | any;\r\n}\r\n\r\nexport type NgxsLifeCycle = Partial<NgxsOnInit>;\r\n"
  ],
  "names": [],
  "mappings": "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"
}
