{
  "version": 3,
  "file": "ngxs-store.umd.min.js",
  "sources": [
    "ng://@ngxs/store/packages/store/src/symbols.ts",
    "ng://@ngxs/store/packages/store/src/internal/internals.ts",
    "ng://@ngxs/store/packages/store/src/utils/utils.ts",
    "ng://@ngxs/store/packages/store/src/operators/of-action.ts",
    "ng://@ngxs/store/packages/store/src/operators/zone.ts",
    "ng://@ngxs/store/packages/store/src/actions-stream.ts",
    "ng://@ngxs/store/packages/store/src/utils/compose.ts",
    "ng://@ngxs/store/packages/store/src/internal/state-stream.ts",
    "ng://@ngxs/store/packages/store/src/plugin-manager.ts",
    "ng://@ngxs/store/packages/store/src/internal/dispatcher.ts",
    "ng://@ngxs/store/packages/store/src/utils/freeze.ts",
    "ng://@ngxs/store/packages/store/src/internal/state-operations.ts",
    "ng://@ngxs/store/packages/store/src/internal/state-context-factory.ts",
    "ng://@ngxs/store/packages/store/src/internal/state-factory.ts",
    "ng://@ngxs/store/packages/store/src/utils/memoize.ts",
    "ng://@ngxs/store/packages/store/src/utils/selector-utils.ts",
    "ng://@ngxs/store/packages/store/src/store.ts",
    "ng://@ngxs/store/packages/store/src/decorators/select.ts",
    "ng://@ngxs/store/packages/store/src/actions/actions.ts",
    "ng://@ngxs/store/packages/store/src/module.ts",
    "ng://@ngxs/store/packages/store/src/decorators/state.ts",
    "ng://@ngxs/store/packages/store/src/decorators/action.ts",
    "ng://@ngxs/store/packages/store/src/decorators/selector.ts"
  ],
  "sourcesContent": [
    "import { InjectionToken } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport const ROOT_STATE_TOKEN = new InjectionToken<any>('ROOT_STATE_TOKEN');\r\nexport const FEATURE_STATE_TOKEN = new InjectionToken<any>('FEATURE_STATE_TOKEN');\r\nexport const META_KEY = 'NGXS_META';\r\nexport const SELECTOR_META_KEY = 'NGXS_SELECTOR_META';\r\n\r\nexport const NGXS_PLUGINS = new InjectionToken('NGXS_PLUGINS');\r\nexport type NgxsPluginConstructor = new (...args: any[]) => NgxsPlugin;\r\nexport type NgxsPluginFn = (state: any, mutation: any, next: NgxsNextPluginFn) => any;\r\n\r\n/**\r\n * The NGXS config settings.\r\n */\r\nexport class NgxsConfig {\r\n  /**\r\n   * Run in development mode. This will add additional debugging features:\r\n   * - Object.freeze on the state and actions to guarantee immutability\r\n   * (default: false)\r\n   */\r\n  developmentMode: boolean;\r\n}\r\n\r\n/**\r\n * State context provided to the actions in the state.\r\n */\r\nexport interface StateContext<T> {\r\n  /**\r\n   * Get the current state.\r\n   */\r\n  getState(): T;\r\n\r\n  /**\r\n   * Reset the state to a new value.\r\n   */\r\n  setState(val: T);\r\n\r\n  /**\r\n   * Patch the existing state with the provided value.\r\n   */\r\n  patchState(val: Partial<T>);\r\n\r\n  /**\r\n   * Dispatch a new action and return the dispatched observable.\r\n   */\r\n  dispatch(actions: any | any[]): Observable<void>;\r\n}\r\n\r\nexport type NgxsNextPluginFn = (state: any, mutation: any) => any;\r\n\r\n/**\r\n * Plugin interface\r\n */\r\nexport interface NgxsPlugin {\r\n  /**\r\n   * Handle the state/action before its submitted to the state handlers.\r\n   */\r\n  handle(state: any, action: any, next: NgxsNextPluginFn): any;\r\n}\r\n\r\n/**\r\n * Options that can be provided to the store.\r\n */\r\nexport interface StoreOptions<T> {\r\n  /**\r\n   * Name of the state. Required.\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * Default values for the state. If not provided, uses empty object.\r\n   */\r\n  defaults?: T;\r\n\r\n  /**\r\n   * Sub states for the given state.\r\n   */\r\n  children?: any[];\r\n}\r\n\r\n/**\r\n * Actions that can be provided in a action decorator.\r\n */\r\nexport interface ActionOptions {\r\n  /**\r\n   * Cancel the previous uncompleted observable(s).\r\n   */\r\n  cancelUncompleted?: boolean;\r\n}\r\n\r\n/**\r\n * On init interface\r\n */\r\nexport interface NgxsOnInit {\r\n  ngxsOnInit(ctx?: StateContext<any>): void | any;\r\n}\r\n\r\nexport type NgxsLifeCycle = Partial<NgxsOnInit>;\r\n",
    "import { META_KEY, ActionOptions, SELECTOR_META_KEY } from '../symbols';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface ObjectKeyMap<T> {\r\n  [key: string]: T;\r\n}\r\n\r\nexport interface StateClass {\r\n  [META_KEY]?: MetaDataModel;\r\n}\r\n\r\nexport type StateKeyGraph = ObjectKeyMap<string[]>;\r\n\r\nexport interface ActionHandlerMetaData {\r\n  fn: string;\r\n  options: ActionOptions;\r\n  type: string;\r\n}\r\n\r\nexport interface StateOperations<T> {\r\n  getState(): T;\r\n  setState(val: T);\r\n  dispatch(actions: any | any[]): Observable<void>;\r\n}\r\n\r\nexport interface MetaDataModel {\r\n  name: string;\r\n  actions: ObjectKeyMap<ActionHandlerMetaData[]>;\r\n  defaults: any;\r\n  path: string;\r\n  children: StateClass[];\r\n  instance: any;\r\n}\r\n\r\nexport type SelectFromState = (state: any) => any;\r\n\r\nexport interface SelectorMetaDataModel {\r\n  selectFromAppState: SelectFromState;\r\n  originalFn: Function;\r\n  containerClass: any;\r\n  selectorName: string;\r\n}\r\n\r\nexport interface MappedStore {\r\n  name: string;\r\n  actions: ObjectKeyMap<ActionHandlerMetaData[]>;\r\n  defaults: any;\r\n  instance: any;\r\n  depth: string;\r\n}\r\n\r\n/**\r\n * Ensures metadata is attached to the class and returns it.\r\n *\r\n * @ignore\r\n */\r\nexport function ensureStoreMetadata(target): MetaDataModel {\r\n  if (!target.hasOwnProperty(META_KEY)) {\r\n    const defaultMetadata: MetaDataModel = {\r\n      name: null,\r\n      actions: {},\r\n      defaults: {},\r\n      path: null,\r\n      children: [],\r\n      instance: null\r\n    };\r\n\r\n    Object.defineProperty(target, META_KEY, { value: defaultMetadata });\r\n  }\r\n  return getStoreMetadata(target);\r\n}\r\n\r\n/**\r\n * Get the metadata attached to the class if it exists.\r\n *\r\n * @ignore\r\n */\r\nexport function getStoreMetadata(target): MetaDataModel {\r\n  return target[META_KEY];\r\n}\r\n\r\n/**\r\n * Ensures metadata is attached to the selector and returns it.\r\n *\r\n * @ignore\r\n */\r\nexport function ensureSelectorMetadata(target): SelectorMetaDataModel {\r\n  if (!target.hasOwnProperty(SELECTOR_META_KEY)) {\r\n    const defaultMetadata: SelectorMetaDataModel = {\r\n      selectFromAppState: null,\r\n      originalFn: null,\r\n      containerClass: null,\r\n      selectorName: null\r\n    };\r\n\r\n    Object.defineProperty(target, SELECTOR_META_KEY, { value: defaultMetadata });\r\n  }\r\n\r\n  return getSelectorMetadata(target);\r\n}\r\n\r\n/**\r\n * Get the metadata attached to the selector if it exists.\r\n *\r\n * @ignore\r\n */\r\nexport function getSelectorMetadata(target): SelectorMetaDataModel {\r\n  return target[SELECTOR_META_KEY];\r\n}\r\n\r\n/**\r\n * The generated function is faster than:\r\n * - pluck (Observable operator)\r\n * - memoize\r\n *\r\n * @ignore\r\n */\r\nexport function fastPropGetter(paths: string[]): (x: any) => any {\r\n  const segments = paths;\r\n  let seg = 'store.' + segments[0];\r\n  let i = 0;\r\n  const l = segments.length;\r\n\r\n  let expr = seg;\r\n  while (++i < l) {\r\n    expr = expr + ' && ' + (seg = seg + '.' + segments[i]);\r\n  }\r\n\r\n  const fn = new Function('store', 'return ' + expr + ';');\r\n\r\n  return <(x: any) => any>fn;\r\n}\r\n\r\n/**\r\n * Given an array of states, it will return a object graph. Example:\r\n *    const states = [\r\n *      Cart,\r\n *      CartSaved,\r\n *      CartSavedItems\r\n *    ]\r\n *\r\n * would return:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function buildGraph(stateClasses: StateClass[]): StateKeyGraph {\r\n  const findName = (stateClass: StateClass) => {\r\n    const meta = stateClasses.find(g => g === stateClass);\r\n    if (!meta) {\r\n      throw new Error(`Child state not found: ${stateClass}`);\r\n    }\r\n\r\n    if (!meta[META_KEY]) {\r\n      throw new Error('States must be decorated with @State() decorator');\r\n    }\r\n\r\n    return meta[META_KEY].name;\r\n  };\r\n\r\n  return stateClasses.reduce<StateKeyGraph>((result: StateKeyGraph, stateClass: StateClass) => {\r\n    if (!stateClass[META_KEY]) {\r\n      throw new Error('States must be decorated with @State() decorator');\r\n    }\r\n\r\n    const { name, children } = stateClass[META_KEY];\r\n    result[name] = (children || []).map(findName);\r\n    return result;\r\n  }, {});\r\n}\r\n\r\n/**\r\n * Given a states array, returns object graph\r\n * returning the name and state metadata. Example:\r\n *\r\n *  const graph = {\r\n *    cart: { metadata }\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function nameToState(states: StateClass[]): ObjectKeyMap<StateClass> {\r\n  return states.reduce<ObjectKeyMap<StateClass>>((result: ObjectKeyMap<StateClass>, stateClass: StateClass) => {\r\n    if (!stateClass[META_KEY]) {\r\n      throw new Error('States must be decorated with @State() decorator');\r\n    }\r\n\r\n    const meta = stateClass[META_KEY];\r\n    result[meta.name] = stateClass;\r\n    return result;\r\n  }, {});\r\n}\r\n\r\n/**\r\n * Given a object relationship graph will return the full path\r\n * for the child items. Example:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * would return:\r\n *\r\n *  const r = {\r\n *    cart: 'cart',\r\n *    saved: 'cart.saved',\r\n *    items: 'cart.saved.items'\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function findFullParentPath(obj: StateKeyGraph, newObj: ObjectKeyMap<string> = {}): ObjectKeyMap<string> {\r\n  const visit = (child: StateKeyGraph, keyToFind: string): string => {\r\n    for (const key in child) {\r\n      if (child.hasOwnProperty(key) && child[key].indexOf(keyToFind) >= 0) {\r\n        const parent = visit(child, key);\r\n        return parent !== null ? `${parent}.${key}` : key;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  for (const key in obj) {\r\n    if (obj.hasOwnProperty(key)) {\r\n      const parent = visit(obj, key);\r\n      newObj[key] = parent ? `${parent}.${key}` : key;\r\n    }\r\n  }\r\n\r\n  return newObj;\r\n}\r\n\r\n/**\r\n * Given a object graph, it will return the items topologically sorted Example:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * would return:\r\n *\r\n *  const results = [\r\n *    'items',\r\n *    'saved',\r\n *    'cart'\r\n *  ];\r\n *\r\n * @ignore\r\n */\r\nexport function topologicalSort(graph: StateKeyGraph): string[] {\r\n  const sorted: string[] = [];\r\n  const visited: ObjectKeyMap<boolean> = {};\r\n\r\n  const visit = (name: string, ancestors: string[] = []) => {\r\n    if (!Array.isArray(ancestors)) {\r\n      ancestors = [];\r\n    }\r\n\r\n    ancestors.push(name);\r\n    visited[name] = true;\r\n\r\n    graph[name].forEach((dep: string) => {\r\n      if (ancestors.indexOf(dep) >= 0) {\r\n        throw new Error(`Circular dependency '${dep}' is required by '${name}': ${ancestors.join(' -> ')}`);\r\n      }\r\n\r\n      if (visited[dep]) {\r\n        return;\r\n      }\r\n\r\n      visit(dep, ancestors.slice(0));\r\n    });\r\n\r\n    if (sorted.indexOf(name) < 0) {\r\n      sorted.push(name);\r\n    }\r\n  };\r\n\r\n  Object.keys(graph).forEach(k => visit(k));\r\n\r\n  return sorted.reverse();\r\n}\r\n\r\n/**\r\n * Returns if the parameter is a object or not.\r\n *\r\n * @ignore\r\n */\r\nexport function isObject(obj) {\r\n  return (typeof obj === 'object' && obj !== null) || typeof obj === 'function';\r\n}\r\n",
    "/**\r\n * Returns the type from an action instance.\r\n * @ignore\r\n */\r\nexport function getActionTypeFromInstance(action: any): string {\r\n  if (action.constructor && action.constructor.type) {\r\n    return action.constructor.type;\r\n  }\r\n\r\n  return action.type;\r\n}\r\n\r\n/**\r\n * Matches a action\r\n * @ignore\r\n */\r\nexport function actionMatcher(action1: any) {\r\n  const type1 = getActionTypeFromInstance(action1);\r\n\r\n  return function(action2: any) {\r\n    return type1 === getActionTypeFromInstance(action2);\r\n  };\r\n}\r\n\r\n/**\r\n * Set a deeply nested value. Example:\r\n *\r\n *   setValue({ foo: { bar: { eat: false } } },\r\n *      'foo.bar.eat', true) //=> { foo: { bar: { eat: true } } }\r\n *\r\n * While it traverses it also creates new objects from top down.\r\n *\r\n * @ignore\r\n */\r\nexport const setValue = (obj: any, prop: string, val: any) => {\r\n  obj = { ...obj };\r\n\r\n  const split = prop.split('.');\r\n  const lastIndex = split.length - 1;\r\n\r\n  split.reduce((acc, part, index) => {\r\n    if (index === lastIndex) {\r\n      acc[part] = val;\r\n    } else {\r\n      acc[part] = { ...acc[part] };\r\n    }\r\n\r\n    return acc && acc[part];\r\n  }, obj);\r\n\r\n  return obj;\r\n};\r\n\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * @ignore\r\n */\r\nexport const getValue = (obj: any, prop: string) =>\r\n  prop.split('.').reduce((acc: any, part: string) => acc && acc[part], obj);\r\n",
    "import { OperatorFunction, Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\nimport { getActionTypeFromInstance } from '../utils/utils';\r\nimport { ActionContext, ActionStatus } from '../actions-stream';\r\n\r\nexport function ofAction<T>(allowedType): OperatorFunction<any, T>;\r\nexport function ofAction<T>(...allowedTypes): OperatorFunction<any, T>;\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will grab actions that have just been dispatched as well as actions that have completed\r\n */\r\nexport function ofAction(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been dispatched\r\n */\r\nexport function ofActionDispatched(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, ActionStatus.Dispatched);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been successfully completed\r\n */\r\nexport function ofActionSuccessful(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, ActionStatus.Successful);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been canceled\r\n */\r\nexport function ofActionCanceled(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, ActionStatus.Canceled);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just thrown an error\r\n */\r\nexport function ofActionErrored(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, ActionStatus.Errored);\r\n}\r\n\r\nfunction ofActionOperator(allowedTypes: any[], status?: ActionStatus) {\r\n  const allowedMap = createAllowedMap(allowedTypes);\r\n  return function(o: Observable<any>) {\r\n    return o.pipe(filterStatus(allowedMap, status), mapAction());\r\n  };\r\n}\r\n\r\nfunction filterStatus(allowedTypes: { [key: string]: boolean }, status?: ActionStatus) {\r\n  return filter((ctx: ActionContext) => {\r\n    const actionType = getActionTypeFromInstance(ctx.action);\r\n    const type = allowedTypes[actionType];\r\n    return status ? type && ctx.status === status : type;\r\n  });\r\n}\r\n\r\nfunction mapAction() {\r\n  return map((ctx: ActionContext) => ctx.action);\r\n}\r\n\r\nfunction createAllowedMap(types: any[]): { [key: string]: boolean } {\r\n  return types.reduce((acc: any, klass: any) => {\r\n    acc[getActionTypeFromInstance(klass)] = true;\r\n    return acc;\r\n  }, {});\r\n}\r\n",
    "import { Observable, Observer } from 'rxjs';\r\nimport { NgZone } from '@angular/core';\r\n\r\n/**\r\n * Operator to run the `subscribe` in a Angular zone.\r\n */\r\nexport function enterZone<T>(zone: NgZone) {\r\n  return (source: Observable<T>) => {\r\n    return new Observable((sink: Observer<T>) => {\r\n      return source.subscribe({\r\n        next(x) {\r\n          zone.run(() => sink.next(x));\r\n        },\r\n        error(e) {\r\n          zone.run(() => sink.error(e));\r\n        },\r\n        complete() {\r\n          zone.run(() => sink.complete());\r\n        }\r\n      });\r\n    });\r\n  };\r\n}\r\n",
    "import { Injectable, NgZone } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nimport { enterZone } from './operators/zone';\r\n\r\n/**\r\n * Status of a dispatched action\r\n */\r\nexport const enum ActionStatus {\r\n  Dispatched = 'DISPATCHED',\r\n  Successful = 'SUCCESSFUL',\r\n  Canceled = 'CANCELED',\r\n  Errored = 'ERRORED'\r\n}\r\n\r\nexport interface ActionContext {\r\n  status: ActionStatus;\r\n  action: any;\r\n  error?: Error;\r\n}\r\n\r\n/**\r\n * Custom Subject that ensures that subscribers are notified of values in the order that they arrived.\r\n * A standard Subject does not have this guarantee.\r\n * For example, given the following code:\r\n * ```typescript\r\n *   const subject = new Subject<string>();\r\n     subject.subscribe(value => {\r\n       if (value === 'start') subject.next('end');\r\n     });\r\n     subject.subscribe(value => { });\r\n     subject.next('start');\r\n * ```\r\n * When `subject` is a standard `Subject<T>` the second subscriber would recieve `end` and then `start`.\r\n * When `subject` is a `OrderedSubject<T>` the second subscriber would recieve `start` and then `end`.\r\n */\r\nexport class OrderedSubject<T> extends Subject<T> {\r\n  private _itemQueue: T[] = [];\r\n  private _busyPushingNext = false;\r\n\r\n  next(value?: T): void {\r\n    if (this._busyPushingNext) {\r\n      this._itemQueue.unshift(value);\r\n      return;\r\n    }\r\n    this._busyPushingNext = true;\r\n    super.next(value);\r\n    while (this._itemQueue.length > 0) {\r\n      const nextValue = this._itemQueue.pop();\r\n      super.next(nextValue);\r\n    }\r\n    this._busyPushingNext = false;\r\n  }\r\n}\r\n\r\n/**\r\n * Internal Action stream that is emitted anytime an action is dispatched.\r\n */\r\n@Injectable()\r\nexport class InternalActions extends OrderedSubject<ActionContext> {}\r\n\r\n/**\r\n * Action stream that is emitted anytime an action is dispatched.\r\n *\r\n * You can listen to this in services to react without stores.\r\n */\r\n@Injectable()\r\nexport class Actions extends Observable<any> {\r\n  constructor(actions$: InternalActions, ngZone: NgZone) {\r\n    super(observer => {\r\n      actions$\r\n        .pipe(enterZone(ngZone))\r\n        .subscribe(res => observer.next(res), err => observer.error(err), () => observer.complete());\r\n    });\r\n  }\r\n}\r\n",
    "/**\r\n * Composes a array of functions from left to right. Example:\r\n *\r\n *      compose([fn, final])(state, action);\r\n *\r\n * then the funcs have a signature like:\r\n *\r\n *      function fn (state, action, next) {\r\n *          console.log('here', state, action, next);\r\n *          return next(state, action);\r\n *      }\r\n *\r\n *      function final (state, action) {\r\n *          console.log('here', state, action);\r\n *          return state;\r\n *      }\r\n *\r\n * the last function should not call `next`.\r\n *\r\n * @ignore\r\n */\r\nexport const compose = funcs => (...args) => {\r\n  const curr = funcs.shift();\r\n  return curr(...args, (...nextArgs) => compose(funcs)(...nextArgs));\r\n};\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n/**\r\n * BehaviorSubject of the entire state.\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateStream extends BehaviorSubject<any> {\r\n  constructor() {\r\n    super({});\r\n  }\r\n}\r\n",
    "import { Injectable, Optional, SkipSelf, Inject } from '@angular/core';\r\nimport { NgxsPluginFn, NGXS_PLUGINS, NgxsPlugin } from './symbols';\r\n\r\n/**\r\n * Plugin manager class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class PluginManager {\r\n  plugins: NgxsPluginFn[] = [];\r\n\r\n  constructor(\r\n    @Optional()\r\n    @SkipSelf()\r\n    private _parentManager: PluginManager,\r\n    @Inject(NGXS_PLUGINS)\r\n    @Optional()\r\n    private _plugins: NgxsPlugin[]\r\n  ) {\r\n    this.register();\r\n  }\r\n\r\n  private register() {\r\n    if (!this._plugins) {\r\n      return;\r\n    }\r\n\r\n    this.plugins = this._plugins.map(plugin => {\r\n      if (plugin.handle) {\r\n        return plugin.handle.bind(plugin);\r\n      } else {\r\n        return plugin;\r\n      }\r\n    });\r\n\r\n    if (this._parentManager) {\r\n      this._parentManager.plugins.push(...this.plugins);\r\n    }\r\n  }\r\n}\r\n",
    "import { Injectable, ErrorHandler, NgZone } from '@angular/core';\r\nimport { Observable, of, forkJoin, empty, Subject, throwError } from 'rxjs';\r\nimport { shareReplay, filter, exhaustMap, take } from 'rxjs/operators';\r\n\r\nimport { compose } from '../utils/compose';\r\nimport { InternalActions, ActionStatus, ActionContext } from '../actions-stream';\r\nimport { StateStream } from './state-stream';\r\nimport { PluginManager } from '../plugin-manager';\r\nimport { enterZone } from '../operators/zone';\r\n\r\n/**\r\n * Internal Action result stream that is emitted when an action is completed.\r\n * This is used as a method of returning the action result to the dispatcher\r\n * for the observable returned by the dispatch(...) call.\r\n * The dispatcher then asynchronously pushes the result from this stream onto the main action stream as a result.\r\n */\r\n@Injectable()\r\nexport class InternalDispatchedActionResults extends Subject<ActionContext> {}\r\n\r\n@Injectable()\r\nexport class InternalDispatcher {\r\n  constructor(\r\n    private _errorHandler: ErrorHandler,\r\n    private _actions: InternalActions,\r\n    private _actionResults: InternalDispatchedActionResults,\r\n    private _pluginManager: PluginManager,\r\n    private _stateStream: StateStream,\r\n    private _ngZone: NgZone\r\n  ) {}\r\n\r\n  /**\r\n   * Dispatches event(s).\r\n   */\r\n  dispatch(event: any | any[]): Observable<any> {\r\n    const result: Observable<any> = this._ngZone.runOutsideAngular(() => {\r\n      if (Array.isArray(event)) {\r\n        return forkJoin(event.map(a => this.dispatchSingle(a)));\r\n      } else {\r\n        return this.dispatchSingle(event);\r\n      }\r\n    });\r\n\r\n    result.subscribe({\r\n      error: error => this._ngZone.run(() => this._errorHandler.handleError(error))\r\n    });\r\n\r\n    return result.pipe(enterZone(this._ngZone));\r\n  }\r\n\r\n  private dispatchSingle(action: any): Observable<any> {\r\n    const prevState = this._stateStream.getValue();\r\n    const plugins = this._pluginManager.plugins;\r\n\r\n    return (compose([\r\n      ...plugins,\r\n      (nextState, nextAction) => {\r\n        if (nextState !== prevState) {\r\n          this._stateStream.next(nextState);\r\n        }\r\n        const actionResult$ = this.getActionResultStream(nextAction);\r\n        actionResult$.subscribe(ctx => this._actions.next(ctx));\r\n        this._actions.next({ action: nextAction, status: ActionStatus.Dispatched });\r\n        return this.createDispatchObservable(actionResult$);\r\n      }\r\n    ])(prevState, action) as Observable<any>).pipe(shareReplay());\r\n  }\r\n\r\n  private getActionResultStream(action: any): Observable<ActionContext> {\r\n    return this._actionResults.pipe(\r\n      filter((ctx: ActionContext) => ctx.action === action && ctx.status !== ActionStatus.Dispatched),\r\n      take(1),\r\n      shareReplay()\r\n    );\r\n  }\r\n\r\n  private createDispatchObservable(actionResult$: Observable<ActionContext>): Observable<any> {\r\n    return actionResult$\r\n      .pipe(\r\n        exhaustMap((ctx: ActionContext) => {\r\n          switch (ctx.status) {\r\n            case ActionStatus.Successful:\r\n              return of(this._stateStream.getValue());\r\n            case ActionStatus.Errored:\r\n              return throwError(ctx.error);\r\n            default:\r\n              return empty();\r\n          }\r\n        })\r\n      )\r\n      .pipe(shareReplay());\r\n  }\r\n}\r\n",
    "/**\r\n * Object freeze code\r\n * https://github.com/jsdf/deep-freeze\r\n */\r\nexport const deepFreeze = o => {\r\n  Object.freeze(o);\r\n\r\n  const oIsFunction = typeof o === 'function';\r\n  const hasOwnProp = Object.prototype.hasOwnProperty;\r\n\r\n  Object.getOwnPropertyNames(o).forEach(function(prop) {\r\n    if (\r\n      hasOwnProp.call(o, prop) &&\r\n      (oIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true) &&\r\n      o[prop] !== null &&\r\n      (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\r\n      !Object.isFrozen(o[prop])\r\n    ) {\r\n      deepFreeze(o[prop]);\r\n    }\r\n  });\r\n\r\n  return o;\r\n};\r\n",
    "import { Injectable } from '@angular/core';\r\n\r\nimport { StateOperations } from '../internal/internals';\r\nimport { InternalDispatcher } from '../internal/dispatcher';\r\nimport { StateStream } from './state-stream';\r\nimport { NgxsConfig } from '../symbols';\r\nimport { deepFreeze } from '../utils/freeze';\r\n\r\n/**\r\n * State Context factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class InternalStateOperations {\r\n  constructor(\r\n    private _stateStream: StateStream,\r\n    private _dispatcher: InternalDispatcher,\r\n    private _config: NgxsConfig\r\n  ) {}\r\n\r\n  /**\r\n   * Returns the root state operators.\r\n   */\r\n  getRootStateOperations(): StateOperations<any> {\r\n    const rootStateOperations = {\r\n      getState: () => this._stateStream.getValue(),\r\n      setState: newState => this._stateStream.next(newState),\r\n      dispatch: actions => this._dispatcher.dispatch(actions)\r\n    };\r\n\r\n    if (this._config.developmentMode) {\r\n      return this.ensureStateAndActionsAreImmutable(rootStateOperations);\r\n    }\r\n\r\n    return rootStateOperations;\r\n  }\r\n\r\n  private ensureStateAndActionsAreImmutable(root: StateOperations<any>): StateOperations<any> {\r\n    return {\r\n      getState: () => root.getState(),\r\n      setState: value => {\r\n        const frozenValue = deepFreeze(value);\r\n        return root.setState(frozenValue);\r\n      },\r\n      dispatch: actions => {\r\n        return root.dispatch(actions);\r\n      }\r\n    };\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { StateContext } from '../symbols';\r\nimport { MappedStore } from '../internal/internals';\r\nimport { setValue, getValue } from '../utils/utils';\r\nimport { InternalStateOperations } from '../internal/state-operations';\r\n\r\n/**\r\n * State Context factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateContextFactory {\r\n  constructor(private _internalStateOperations: InternalStateOperations) {}\r\n\r\n  /**\r\n   * Create the state context\r\n   */\r\n  createStateContext(metadata: MappedStore): StateContext<any> {\r\n    const root = this._internalStateOperations.getRootStateOperations();\r\n    return {\r\n      getState(): any {\r\n        const state = root.getState();\r\n        return getValue(state, metadata.depth);\r\n      },\r\n      patchState(val: any): any {\r\n        const isArray = Array.isArray(val);\r\n        const isPrimitive = typeof val !== 'object';\r\n\r\n        if (isArray) {\r\n          throw new Error('Patching arrays is not supported.');\r\n        } else if (isPrimitive) {\r\n          throw new Error('Patching primitives is not supported.');\r\n        }\r\n\r\n        const state = root.getState();\r\n        const local = getValue(state, metadata.depth);\r\n        const clone = { ...local };\r\n\r\n        for (const k in val) {\r\n          clone[k] = val[k];\r\n        }\r\n\r\n        const newState = setValue(state, metadata.depth, clone);\r\n        root.setState(newState);\r\n        return newState;\r\n      },\r\n      setState(val: any): any {\r\n        let state = root.getState();\r\n        state = setValue(state, metadata.depth, val);\r\n        root.setState(state);\r\n        return state;\r\n      },\r\n      dispatch(actions: any | any[]): Observable<any> {\r\n        return root.dispatch(actions);\r\n      }\r\n    };\r\n  }\r\n}\r\n",
    "import { Injector, Injectable, SkipSelf, Optional } from '@angular/core';\r\nimport { Observable, of, forkJoin, from, throwError } from 'rxjs';\r\nimport { shareReplay, takeUntil, map, catchError, filter, mergeMap, defaultIfEmpty } from 'rxjs/operators';\r\n\r\nimport { META_KEY, NgxsLifeCycle } from '../symbols';\r\nimport {\r\n  topologicalSort,\r\n  buildGraph,\r\n  findFullParentPath,\r\n  nameToState,\r\n  isObject,\r\n  StateClass,\r\n  MappedStore\r\n} from './internals';\r\nimport { getActionTypeFromInstance, setValue } from '../utils/utils';\r\nimport { ofActionDispatched } from '../operators/of-action';\r\nimport { InternalActions, ActionStatus, ActionContext } from '../actions-stream';\r\nimport { InternalDispatchedActionResults } from '../internal/dispatcher';\r\nimport { StateContextFactory } from '../internal/state-context-factory';\r\n\r\n/**\r\n * State factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateFactory {\r\n  get states(): MappedStore[] {\r\n    return this._parentFactory ? this._parentFactory.states : this._states;\r\n  }\r\n\r\n  private _states: MappedStore[] = [];\r\n  private _connected = false;\r\n\r\n  constructor(\r\n    private _injector: Injector,\r\n    @Optional()\r\n    @SkipSelf()\r\n    private _parentFactory: StateFactory,\r\n    private _actions: InternalActions,\r\n    private _actionResults: InternalDispatchedActionResults,\r\n    private _stateContextFactory: StateContextFactory\r\n  ) {}\r\n\r\n  /**\r\n   * Add a new state to the global defs.\r\n   */\r\n  add(oneOrManyStateClasses: StateClass | StateClass[]): MappedStore[] {\r\n    let stateClasses: StateClass[];\r\n    if (!Array.isArray(oneOrManyStateClasses)) {\r\n      stateClasses = [oneOrManyStateClasses];\r\n    } else {\r\n      stateClasses = oneOrManyStateClasses;\r\n    }\r\n\r\n    const stateGraph = buildGraph(stateClasses);\r\n    const sortedStates = topologicalSort(stateGraph);\r\n    const depths = findFullParentPath(stateGraph);\r\n    const nameGraph = nameToState(stateClasses);\r\n    const mappedStores: MappedStore[] = [];\r\n\r\n    for (const name of sortedStates) {\r\n      const stateClass = nameGraph[name];\r\n\r\n      if (!stateClass[META_KEY]) {\r\n        throw new Error('States must be decorated with @State() decorator');\r\n      }\r\n\r\n      const depth = depths[name];\r\n      const { actions } = stateClass[META_KEY];\r\n      let { defaults } = stateClass[META_KEY];\r\n\r\n      stateClass[META_KEY].path = depth;\r\n\r\n      // ensure our store hasn't already been added\r\n      // but dont throw since it could be lazy\r\n      // loaded from different paths\r\n      const has = this.states.find(s => s.name === name);\r\n      if (!has) {\r\n        // create new instance of defaults\r\n        if (Array.isArray(defaults)) {\r\n          defaults = [...defaults];\r\n        } else if (isObject(defaults)) {\r\n          defaults = { ...defaults };\r\n        } else if (defaults === undefined) {\r\n          defaults = {};\r\n        }\r\n\r\n        const instance = this._injector.get(stateClass);\r\n\r\n        mappedStores.push({\r\n          actions,\r\n          instance,\r\n          defaults,\r\n          name,\r\n          depth\r\n        });\r\n      }\r\n    }\r\n\r\n    this.states.push(...mappedStores);\r\n\r\n    return mappedStores;\r\n  }\r\n\r\n  /**\r\n   * Add a set of states to the store and return the defaulsts\r\n   */\r\n  addAndReturnDefaults(stateClasses: any[]): { defaults: any; states: MappedStore[] } {\r\n    if (stateClasses) {\r\n      const states = this.add(stateClasses);\r\n      const defaults = states.reduce(\r\n        (result: any, meta: MappedStore) => setValue(result, meta.depth, meta.defaults),\r\n        {}\r\n      );\r\n      return { defaults, states };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Bind the actions to the handlers\r\n   */\r\n  connectActionHandlers() {\r\n    if (this._connected) return;\r\n    this._actions\r\n      .pipe(\r\n        filter((ctx: ActionContext) => ctx.status === ActionStatus.Dispatched),\r\n        mergeMap(({ action }) =>\r\n          this.invokeActions(this._actions, action).pipe(\r\n            map(() => <ActionContext>{ action, status: ActionStatus.Successful }),\r\n            defaultIfEmpty(<ActionContext>{ action, status: ActionStatus.Canceled }),\r\n            catchError(error => of(<ActionContext>{ action, status: ActionStatus.Errored, error }))\r\n          )\r\n        )\r\n      )\r\n      .subscribe(ctx => this._actionResults.next(ctx));\r\n    this._connected = true;\r\n  }\r\n\r\n  /**\r\n   * Invoke the init function on the states.\r\n   */\r\n  invokeInit(stateMetadatas: MappedStore[]) {\r\n    for (const metadata of stateMetadatas) {\r\n      const instance: NgxsLifeCycle = metadata.instance;\r\n\r\n      if (instance.ngxsOnInit) {\r\n        const stateContext = this.createStateContext(metadata);\r\n        instance.ngxsOnInit(stateContext);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Invoke actions on the states.\r\n   */\r\n  invokeActions(actions$: InternalActions, action) {\r\n    const results = [];\r\n\r\n    for (const metadata of this.states) {\r\n      const type = getActionTypeFromInstance(action);\r\n      const actionMetas = metadata.actions[type];\r\n\r\n      if (actionMetas) {\r\n        for (const actionMeta of actionMetas) {\r\n          const stateContext = this.createStateContext(metadata);\r\n          try {\r\n            let result = metadata.instance[actionMeta.fn](stateContext, action);\r\n\r\n            if (result instanceof Promise) {\r\n              result = from(result);\r\n            }\r\n\r\n            if (result instanceof Observable) {\r\n              result = result.pipe(\r\n                actionMeta.options.cancelUncompleted\r\n                  ? takeUntil(actions$.pipe(ofActionDispatched(action)))\r\n                  : map(r => r)\r\n              ); // map acts like a noop\r\n            } else {\r\n              result = of({}).pipe(shareReplay());\r\n            }\r\n\r\n            results.push(result);\r\n          } catch (e) {\r\n            results.push(throwError(e));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!results.length) {\r\n      results.push(of({}));\r\n    }\r\n\r\n    return forkJoin(results);\r\n  }\r\n\r\n  /**\r\n   * Create the state context\r\n   */\r\n  private createStateContext(metadata: MappedStore) {\r\n    return this._stateContextFactory.createStateContext(metadata);\r\n  }\r\n}\r\n",
    "function defaultEqualityCheck(a, b) {\r\n  return a === b;\r\n}\r\n\r\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\r\n  if (prev === null || next === null || prev.length !== next.length) {\r\n    return false;\r\n  }\r\n\r\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\r\n  const length = prev.length;\r\n  for (let i = 0; i < length; i++) {\r\n    if (!equalityCheck(prev[i], next[i])) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Memoize a function on its last inputs only.\r\n * Oringinally from: https://github.com/reduxjs/reselect/blob/master/src/index.js\r\n *\r\n * @ignore\r\n */\r\nexport function memoize(func, equalityCheck = defaultEqualityCheck) {\r\n  let lastArgs = null;\r\n  let lastResult = null;\r\n  // we reference arguments instead of spreading them for performance reasons\r\n  return <(...args) => any>function memoized() {\r\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\r\n      // apply arguments instead of spreading for performance.\r\n      lastResult = func.apply(null, arguments);\r\n    }\r\n\r\n    lastArgs = arguments;\r\n    return lastResult;\r\n  };\r\n}\r\n",
    "import {\r\n  SelectFromState,\r\n  fastPropGetter,\r\n  ensureSelectorMetadata,\r\n  getSelectorMetadata,\r\n  getStoreMetadata\r\n} from '../internal/internals';\r\nimport { memoize } from '../utils/memoize';\r\n\r\n/**\r\n * Function for creating a selector\r\n * @param selectors The selectors to use to create the arguments of this function\r\n * @param originalFn The original function being made into a selector\r\n */\r\nexport function createSelector(\r\n  selectors: any[],\r\n  originalFn: any,\r\n  creationMetadata?: { containerClass: any; selectorName: string }\r\n) {\r\n  const wrappedFn = function wrappedSelectorFn(...args) {\r\n    const returnValue = originalFn(...args);\r\n    if (returnValue instanceof Function) {\r\n      const innerMemoizedFn = memoize.apply(null, [returnValue]);\r\n      return innerMemoizedFn;\r\n    }\r\n    return returnValue;\r\n  };\r\n  const memoizedFn = memoize(wrappedFn);\r\n  const containerClass = creationMetadata && creationMetadata.containerClass;\r\n\r\n  const fn = state => {\r\n    const results = [];\r\n\r\n    const selectorsToApply = [];\r\n\r\n    if (containerClass) {\r\n      // If we are on a state class, add it as the first selector parameter\r\n      const metadata = getStoreMetadata(containerClass);\r\n      if (metadata) {\r\n        selectorsToApply.push(containerClass);\r\n      }\r\n    }\r\n    if (selectors) {\r\n      selectorsToApply.push(...selectors);\r\n    }\r\n    // Determine arguments from the app state using the selectors\r\n    if (selectorsToApply) {\r\n      results.push(...selectorsToApply.map(a => getSelectorFn(a)(state)));\r\n    }\r\n\r\n    // if the lambda tries to access a something on the\r\n    // state that doesn't exist, it will throw a TypeError.\r\n    // since this is quite usual behaviour, we simply return undefined if so.\r\n    try {\r\n      return memoizedFn(...results);\r\n    } catch (ex) {\r\n      if (ex instanceof TypeError) {\r\n        return undefined;\r\n      }\r\n      throw ex;\r\n    }\r\n  };\r\n\r\n  const selectorMetaData = ensureSelectorMetadata(memoizedFn);\r\n  selectorMetaData.originalFn = originalFn;\r\n  selectorMetaData.selectFromAppState = fn;\r\n  if (creationMetadata) {\r\n    selectorMetaData.containerClass = creationMetadata.containerClass;\r\n    selectorMetaData.selectorName = creationMetadata.selectorName;\r\n  }\r\n  return memoizedFn;\r\n}\r\n\r\n/**\r\n * This function gets the selector function to be used to get the selected slice from the app state\r\n * @ignore\r\n */\r\nexport function getSelectorFn(selector: any): SelectFromState {\r\n  const selectorMetadata = getSelectorMetadata(selector);\r\n  if (selectorMetadata) {\r\n    const selectFromAppState = selectorMetadata.selectFromAppState;\r\n    if (selectFromAppState) {\r\n      return selectFromAppState;\r\n    }\r\n  }\r\n  const stateMetadata = getStoreMetadata(selector);\r\n  if (stateMetadata && stateMetadata.path) {\r\n    return fastPropGetter(stateMetadata.path.split('.'));\r\n  }\r\n  return selector;\r\n}\r\n",
    "import { Injectable, NgZone } from '@angular/core';\r\nimport { Observable, of, Subscription } from 'rxjs';\r\nimport { catchError, distinctUntilChanged, map, take } from 'rxjs/operators';\r\n\r\nimport { getSelectorFn } from './utils/selector-utils';\r\nimport { InternalStateOperations } from './internal/state-operations';\r\nimport { StateStream } from './internal/state-stream';\r\nimport { enterZone } from './operators/zone';\r\n\r\n@Injectable()\r\nexport class Store {\r\n  constructor(\r\n    private _ngZone: NgZone,\r\n    private _stateStream: StateStream,\r\n    private _internalStateOperations: InternalStateOperations\r\n  ) {}\r\n\r\n  /**\r\n   * Dispatches event(s).\r\n   */\r\n  dispatch(event: any | any[]): Observable<any> {\r\n    return this._internalStateOperations.getRootStateOperations().dispatch(event);\r\n  }\r\n\r\n  /**\r\n   * Selects a slice of data from the store.\r\n   */\r\n  select<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\r\n  select(selector: string | any): Observable<any>;\r\n  select(selector: any): Observable<any> {\r\n    const selectorFn = getSelectorFn(selector);\r\n    return this._stateStream.pipe(\r\n      map(selectorFn),\r\n      catchError(err => {\r\n        // if error is TypeError we swallow it to prevent usual errors with property access\r\n        if (err instanceof TypeError) {\r\n          return of(undefined);\r\n        }\r\n\r\n        // rethrow other errors\r\n        throw err;\r\n      }),\r\n      distinctUntilChanged(),\r\n      enterZone(this._ngZone)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Select one slice of data from the store.\r\n   */\r\n  selectOnce<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\r\n  selectOnce(selector: string | any): Observable<any>;\r\n  selectOnce(selector: any): Observable<any> {\r\n    return this.select(selector).pipe(take(1));\r\n  }\r\n\r\n  /**\r\n   * Select a snapshot from the state.\r\n   */\r\n  selectSnapshot<T>(selector: (state: any, ...states: any[]) => T): T;\r\n  selectSnapshot(selector: string | any): any;\r\n  selectSnapshot(selector: any): any {\r\n    const selectorFn = getSelectorFn(selector);\r\n    return selectorFn(this._stateStream.getValue());\r\n  }\r\n\r\n  /**\r\n   * Allow the user to subscribe to the root of the state\r\n   */\r\n  subscribe(fn?: any): Subscription {\r\n    return this._stateStream.pipe(enterZone(this._ngZone)).subscribe(fn);\r\n  }\r\n\r\n  /**\r\n   * Return the raw value of the state.\r\n   */\r\n  snapshot(): any {\r\n    return this._internalStateOperations.getRootStateOperations().getState();\r\n  }\r\n\r\n  /**\r\n   * Reset the state to a specific point in time. This method is useful\r\n   * for plugin's who need to modify the state directly or unit testing.\r\n   */\r\n  reset(state: any) {\r\n    return this._internalStateOperations.getRootStateOperations().setState(state);\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\n\r\nimport { Store } from '../store';\r\nimport { fastPropGetter } from '../internal/internals';\r\nimport { META_KEY } from '../symbols';\r\n\r\n/**\r\n * Allows the select decorator to get access to the DI store.\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class SelectFactory {\r\n  static store: Store | undefined = undefined;\r\n  constructor(store: Store) {\r\n    SelectFactory.store = store;\r\n  }\r\n}\r\n\r\n/**\r\n * Decorator for selecting a slice of state from the store.\r\n */\r\nexport function Select(selectorOrFeature?, ...paths: string[]) {\r\n  return function(target: any, name: string) {\r\n    const selectorFnName = '__' + name + '__selector';\r\n\r\n    if (!selectorOrFeature) {\r\n      // if foo$ => make it just foo\r\n      selectorOrFeature = name.lastIndexOf('$') === name.length - 1 ? name.substring(0, name.length - 1) : name;\r\n    }\r\n\r\n    const createSelect = fn => {\r\n      const store = SelectFactory.store;\r\n\r\n      if (!store) {\r\n        throw new Error('SelectFactory not connected to store!');\r\n      }\r\n\r\n      return store.select(fn);\r\n    };\r\n\r\n    const createSelector = () => {\r\n      if (typeof selectorOrFeature === 'string') {\r\n        const propsArray = paths.length ? [selectorOrFeature, ...paths] : selectorOrFeature.split('.');\r\n\r\n        return fastPropGetter(propsArray);\r\n      } else if (selectorOrFeature[META_KEY] && selectorOrFeature[META_KEY].path) {\r\n        return fastPropGetter(selectorOrFeature[META_KEY].path.split('.'));\r\n      } else {\r\n        return selectorOrFeature;\r\n      }\r\n    };\r\n\r\n    if (target[selectorFnName]) {\r\n      throw new Error('You cannot use @Select decorator and a ' + selectorFnName + ' property.');\r\n    }\r\n\r\n    if (delete target[name]) {\r\n      Object.defineProperty(target, selectorFnName, {\r\n        writable: true,\r\n        enumerable: false,\r\n        configurable: true\r\n      });\r\n\r\n      Object.defineProperty(target, name, {\r\n        get: function() {\r\n          return this[selectorFnName] || (this[selectorFnName] = createSelect.apply(this, [createSelector()]));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n      });\r\n    }\r\n  };\r\n}\r\n",
    "/**\r\n * Init action\r\n */\r\nexport class InitState {\r\n  static readonly type = '@@INIT';\r\n}\r\n\r\n/**\r\n * Update action\r\n */\r\nexport class UpdateState {\r\n  static readonly type = '@@UPDATE_STATE';\r\n}\r\n",
    "import { NgModule, ModuleWithProviders, Optional, Inject, InjectionToken } from '@angular/core';\r\n\r\nimport { ROOT_STATE_TOKEN, FEATURE_STATE_TOKEN, NgxsConfig } from './symbols';\r\nimport { StateFactory } from './internal/state-factory';\r\nimport { StateContextFactory } from './internal/state-context-factory';\r\nimport { Actions, InternalActions } from './actions-stream';\r\nimport { InternalDispatcher, InternalDispatchedActionResults } from './internal/dispatcher';\r\nimport { InternalStateOperations } from './internal/state-operations';\r\nimport { Store } from './store';\r\nimport { SelectFactory } from './decorators/select';\r\nimport { StateStream } from './internal/state-stream';\r\nimport { PluginManager } from './plugin-manager';\r\nimport { InitState, UpdateState } from './actions/actions';\r\n\r\n/**\r\n * Root module\r\n * @ignore\r\n */\r\n@NgModule()\r\nexport class NgxsRootModule {\r\n  constructor(\r\n    factory: StateFactory,\r\n    internalStateOperations: InternalStateOperations,\r\n    store: Store,\r\n    select: SelectFactory,\r\n    @Optional()\r\n    @Inject(ROOT_STATE_TOKEN)\r\n    states: any[]\r\n  ) {\r\n    // add stores to the state graph and return their defaults\r\n    const results = factory.addAndReturnDefaults(states);\r\n\r\n    const stateOperations = internalStateOperations.getRootStateOperations();\r\n    if (results) {\r\n      // get our current stream\r\n      const cur = stateOperations.getState();\r\n\r\n      // set the state to the current + new\r\n      stateOperations.setState({ ...cur, ...results.defaults });\r\n    }\r\n\r\n    // connect our actions stream\r\n    factory.connectActionHandlers();\r\n\r\n    // dispatch the init action and invoke init function after\r\n    stateOperations.dispatch(new InitState()).subscribe(() => {\r\n      if (results) {\r\n        factory.invokeInit(results.states);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Feature module\r\n * @ignore\r\n */\r\n@NgModule({})\r\nexport class NgxsFeatureModule {\r\n  constructor(\r\n    store: Store,\r\n    internalStateOperations: InternalStateOperations,\r\n    factory: StateFactory,\r\n    @Optional()\r\n    @Inject(FEATURE_STATE_TOKEN)\r\n    states: any[][]\r\n  ) {\r\n    // Since FEATURE_STATE_TOKEN is a multi token, we need to\r\n    // flatten it [[Feature1State, Feature2State], [Feature3State]]\r\n    const flattenedStates = ([] as any[]).concat(...states);\r\n\r\n    // add stores to the state graph and return their defaults\r\n    const results = factory.addAndReturnDefaults(flattenedStates);\r\n\r\n    const stateOperations = internalStateOperations.getRootStateOperations();\r\n    if (results) {\r\n      // get our current stream\r\n      const cur = stateOperations.getState();\r\n\r\n      // set the state to the current + new\r\n      stateOperations.setState({ ...cur, ...results.defaults });\r\n    }\r\n\r\n    stateOperations.dispatch(new UpdateState()).subscribe(() => {\r\n      if (results) {\r\n        factory.invokeInit(results.states);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport type ModuleOptions = Partial<NgxsConfig>;\r\n\r\nexport function ngxsConfigFactory(options: ModuleOptions): NgxsConfig {\r\n  const config = Object.assign(new NgxsConfig(), options);\r\n  return config;\r\n}\r\n\r\nexport const ROOT_OPTIONS = new InjectionToken('ROOT_OPTIONS');\r\n\r\n/**\r\n * Ngxs Module\r\n */\r\n@NgModule({})\r\nexport class NgxsModule {\r\n  /**\r\n   * Root module factory\r\n   */\r\n  static forRoot(states: any[] = [], options: ModuleOptions = {}): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxsRootModule,\r\n      providers: [\r\n        StateFactory,\r\n        StateContextFactory,\r\n        Actions,\r\n        InternalActions,\r\n        InternalDispatcher,\r\n        InternalDispatchedActionResults,\r\n        InternalStateOperations,\r\n        Store,\r\n        StateStream,\r\n        SelectFactory,\r\n        PluginManager,\r\n        ...states,\r\n        {\r\n          provide: ROOT_STATE_TOKEN,\r\n          useValue: states\r\n        },\r\n        {\r\n          provide: ROOT_OPTIONS,\r\n          useValue: options\r\n        },\r\n        {\r\n          provide: NgxsConfig,\r\n          useFactory: ngxsConfigFactory,\r\n          deps: [ROOT_OPTIONS]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Feature module factory\r\n   */\r\n  static forFeature(states: any[]): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxsFeatureModule,\r\n      providers: [\r\n        StateFactory,\r\n        PluginManager,\r\n        ...states,\r\n        {\r\n          provide: FEATURE_STATE_TOKEN,\r\n          multi: true,\r\n          useValue: states\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n",
    "import { ensureStoreMetadata } from '../internal/internals';\r\nimport { StoreOptions, META_KEY } from '../symbols';\r\n\r\nconst stateNameRegex = new RegExp('^[a-zA-Z0-9]+$');\r\n\r\n/**\r\n * Error message\r\n * @ignore\r\n */\r\nexport const stateNameErrorMessage = name =>\r\n  `${name} is not a valid state name. It needs to be a valid object property name.`;\r\n\r\n/**\r\n * Decorates a class with ngxs state information.\r\n */\r\nexport function State<T>(options: StoreOptions<T>) {\r\n  return function(target: any) {\r\n    const meta = ensureStoreMetadata(target);\r\n\r\n    // Handle inheritance\r\n    if (Object.getPrototypeOf(target).hasOwnProperty(META_KEY)) {\r\n      const parentMeta = Object.getPrototypeOf(target)[META_KEY];\r\n\r\n      meta.actions = {\r\n        ...meta.actions,\r\n        ...parentMeta.actions\r\n      };\r\n    }\r\n\r\n    meta.children = options.children;\r\n    meta.defaults = options.defaults;\r\n    meta.name = options.name;\r\n\r\n    if (!options.name) {\r\n      throw new Error(`States must register a 'name' property`);\r\n    }\r\n\r\n    if (!stateNameRegex.test(options.name)) {\r\n      throw new Error(stateNameErrorMessage(options.name));\r\n    }\r\n  };\r\n}\r\n",
    "import { ensureStoreMetadata } from '../internal/internals';\r\nimport { ActionOptions } from '../symbols';\r\n\r\n/**\r\n * Decorates a method with a action information.\r\n */\r\nexport function Action(actions: any | any[], options?: ActionOptions) {\r\n  return function(target: any, name: string, descriptor: TypedPropertyDescriptor<any>) {\r\n    const meta = ensureStoreMetadata(target.constructor);\r\n\r\n    if (!Array.isArray(actions)) {\r\n      actions = [actions];\r\n    }\r\n\r\n    for (const action of actions) {\r\n      const type = action.type;\r\n\r\n      if (!action.type) {\r\n        throw new Error(`Action ${action.name} is missing a static \"type\" property`);\r\n      }\r\n\r\n      if (!meta.actions[type]) {\r\n        meta.actions[type] = [];\r\n      }\r\n\r\n      meta.actions[type].push({\r\n        fn: name,\r\n        options: options || {},\r\n        type\r\n      });\r\n    }\r\n  };\r\n}\r\n",
    "import { createSelector } from '../utils/selector-utils';\r\n\r\n/**\r\n * Decorator for memoizing a state selector.\r\n */\r\nexport function Selector(selectors?: any[]) {\r\n  return (target: any, key: string, descriptor: PropertyDescriptor) => {\r\n    if (descriptor.value !== null) {\r\n      const originalFn = descriptor.value;\r\n\r\n      const memoizedFn = createSelector(selectors, originalFn, { containerClass: target, selectorName: key });\r\n\r\n      return {\r\n        configurable: true,\r\n        get() {\r\n          return memoizedFn;\r\n        }\r\n      };\r\n    } else {\r\n      throw new Error('Selectors only work on methods');\r\n    }\r\n  };\r\n}\r\n"
  ],
  "names": [
    "ROOT_STATE_TOKEN",
    "InjectionToken",
    "FEATURE_STATE_TOKEN",
    "META_KEY",
    "SELECTOR_META_KEY",
    "NGXS_PLUGINS",
    "NgxsConfig",
    "ensureStoreMetadata",
    "target",
    "hasOwnProperty",
    "Object",
    "defineProperty",
    "value",
    "name",
    "actions",
    "defaults",
    "path",
    "children",
    "instance",
    "getStoreMetadata",
    "getSelectorMetadata",
    "fastPropGetter",
    "paths",
    "segments",
    "seg",
    "i",
    "l",
    "length",
    "expr",
    "Function",
    "getActionTypeFromInstance",
    "action",
    "constructor",
    "type",
    "setValue",
    "obj",
    "prop",
    "val",
    "assign",
    "split",
    "lastIndex",
    "reduce",
    "acc",
    "part",
    "index",
    "getValue",
    "ofActionOperator",
    "allowedTypes",
    "status",
    "allowedMap",
    "enterZone",
    "zone",
    "source",
    "Observable",
    "sink",
    "subscribe",
    "next",
    "x",
    "run",
    "error",
    "e",
    "complete",
    "OrderedSubject",
    "_this",
    "_super",
    "apply",
    "this",
    "tslib_1.__spread",
    "arguments",
    "_busyPushingNext",
    "prototype",
    "_itemQueue",
    "unshift",
    "call",
    "nextValue",
    "pop",
    "Subject",
    "InternalActions",
    "decorators",
    "Injectable",
    "observer",
    "actions$",
    "compose",
    "funcs",
    "args",
    "_i",
    "StateStream",
    "tslib_1.__extends",
    "PluginManager",
    "_parentManager",
    "_plugins",
    "plugins",
    "register",
    "map",
    "plugin",
    "handle",
    "bind",
    "_a",
    "push",
    "InternalDispatchedActionResults",
    "InternalDispatcher",
    "_errorHandler",
    "_actions",
    "_actionResults",
    "_pluginManager",
    "_stateStream",
    "_ngZone",
    "dispatch",
    "event",
    "result",
    "runOutsideAngular",
    "Array",
    "isArray",
    "forkJoin",
    "a",
    "dispatchSingle",
    "handleError",
    "pipe",
    "prevState",
    "nextState",
    "nextAction",
    "actionResult$",
    "getActionResultStream",
    "ctx",
    "createDispatchObservable",
    "shareReplay",
    "filter",
    "take",
    "exhaustMap",
    "throwError",
    "deepFreeze",
    "o",
    "freeze",
    "oIsFunction",
    "hasOwnProp",
    "getOwnPropertyNames",
    "forEach",
    "isFrozen",
    "InternalStateOperations",
    "_dispatcher",
    "_config",
    "getRootStateOperations",
    "rootStateOperations",
    "getState",
    "setState",
    "newState",
    "developmentMode",
    "ensureStateAndActionsAreImmutable",
    "root",
    "frozenValue",
    "ctorParameters",
    "StateContextFactory",
    "_internalStateOperations",
    "createStateContext",
    "metadata",
    "state",
    "depth",
    "patchState",
    "isPrimitive",
    "Error",
    "local",
    "clone",
    "k",
    "StateFactory",
    "_injector",
    "_parentFactory",
    "_stateContextFactory",
    "_states",
    "_connected",
    "get",
    "configurable",
    "add",
    "oneOrManyStateClasses",
    "stateClasses",
    "findName",
    "graph",
    "sorted",
    "visited",
    "visit",
    "e_1",
    "_b",
    "stateGraph",
    "stateClass",
    "meta",
    "find",
    "g",
    "sortedStates",
    "ancestors",
    "dep",
    "indexOf",
    "join",
    "slice",
    "keys",
    "depths",
    "newObj",
    "child",
    "keyToFind",
    "key",
    "parent_1",
    "parent_2",
    "findFullParentPath",
    "nameGraph",
    "mappedStores",
    "_loop_1",
    "name_1",
    "this_1",
    "states",
    "s",
    "undefined",
    "sortedStates_1",
    "tslib_1.__values",
    "sortedStates_1_1",
    "done",
    "e_1_1",
    "mergeMap",
    "invokeActions",
    "defaultIfEmpty",
    "catchError",
    "of",
    "invokeInit",
    "stateMetadatas",
    "stateMetadatas_1",
    "stateMetadatas_1_1",
    "ngxsOnInit",
    "stateContext",
    "e_2_1",
    "e_2",
    "return",
    "actionMetas",
    "actionMeta",
    "fn",
    "Promise",
    "from",
    "defaultEqualityCheck",
    "b",
    "memoize",
    "func",
    "equalityCheck",
    "lastArgs",
    "prev",
    "lastResult",
    "createSelector",
    "selectors",
    "originalFn",
    "creationMetadata",
    "memoizedFn",
    "returnValue",
    "selectorMetaData",
    "selectFromAppState",
    "containerClass",
    "selectorName",
    "ensureSelectorMetadata",
    "results",
    "selectorsToApply",
    "getSelectorFn",
    "ex",
    "TypeError",
    "selector",
    "selectorMetadata",
    "stateMetadata",
    "Store",
    "select",
    "selectorFn",
    "err",
    "distinctUntilChanged",
    "selectOnce",
    "selectSnapshot",
    "snapshot",
    "reset",
    "NgZone",
    "SelectFactory",
    "store",
    "InitState",
    "NgxsRootModule",
    "factory",
    "addAndReturnDefaults",
    "stateOperations",
    "internalStateOperations",
    "cur",
    "flattenedStates",
    "concat",
    "UpdateState",
    "NgModule",
    "Optional",
    "Inject",
    "NgxsModule",
    "forRoot",
    "options",
    "ngModule",
    "providers",
    "Actions",
    "provide",
    "useValue",
    "ROOT_OPTIONS",
    "useFactory",
    "ngxsConfigFactory",
    "deps",
    "forFeature",
    "NgxsFeatureModule",
    "stateNameRegex",
    "RegExp",
    "stateNameErrorMessage",
    "descriptor",
    "actions_1",
    "actions_1_1",
    "getPrototypeOf",
    "parentMeta",
    "test",
    "selectorOrFeature",
    "selectorFnName",
    "lastIndexOf",
    "substring",
    "writable",
    "enumerable",
    "memoizedFn_1",
    "action1",
    "type1",
    "action2"
  ],
  "mappings": "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"
}
