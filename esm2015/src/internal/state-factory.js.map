{
  "version": 3,
  "file": "state-factory.js",
  "sources": [
    "ng://@ngxs/store/packages/store/src/internal/state-factory.ts"
  ],
  "sourcesContent": [
    "import { Injector, Injectable, SkipSelf, Optional } from '@angular/core';\r\nimport { Observable, of, forkJoin, from, throwError } from 'rxjs';\r\nimport { shareReplay, takeUntil, map, catchError, filter, mergeMap, defaultIfEmpty } from 'rxjs/operators';\r\n\r\nimport { META_KEY, NgxsLifeCycle } from '../symbols';\r\nimport {\r\n  topologicalSort,\r\n  buildGraph,\r\n  findFullParentPath,\r\n  nameToState,\r\n  isObject,\r\n  StateClass,\r\n  MappedStore\r\n} from './internals';\r\nimport { getActionTypeFromInstance, setValue } from '../utils/utils';\r\nimport { ofActionDispatched } from '../operators/of-action';\r\nimport { InternalActions, ActionStatus, ActionContext } from '../actions-stream';\r\nimport { InternalDispatchedActionResults } from '../internal/dispatcher';\r\nimport { StateContextFactory } from '../internal/state-context-factory';\r\n\r\n/**\r\n * State factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateFactory {\r\n  get states(): MappedStore[] {\r\n    return this._parentFactory ? this._parentFactory.states : this._states;\r\n  }\r\n\r\n  private _states: MappedStore[] = [];\r\n  private _connected = false;\r\n\r\n  constructor(\r\n    private _injector: Injector,\r\n    @Optional()\r\n    @SkipSelf()\r\n    private _parentFactory: StateFactory,\r\n    private _actions: InternalActions,\r\n    private _actionResults: InternalDispatchedActionResults,\r\n    private _stateContextFactory: StateContextFactory\r\n  ) {}\r\n\r\n  /**\r\n   * Add a new state to the global defs.\r\n   */\r\n  add(oneOrManyStateClasses: StateClass | StateClass[]): MappedStore[] {\r\n    let stateClasses: StateClass[];\r\n    if (!Array.isArray(oneOrManyStateClasses)) {\r\n      stateClasses = [oneOrManyStateClasses];\r\n    } else {\r\n      stateClasses = oneOrManyStateClasses;\r\n    }\r\n\r\n    const stateGraph = buildGraph(stateClasses);\r\n    const sortedStates = topologicalSort(stateGraph);\r\n    const depths = findFullParentPath(stateGraph);\r\n    const nameGraph = nameToState(stateClasses);\r\n    const mappedStores: MappedStore[] = [];\r\n\r\n    for (const name of sortedStates) {\r\n      const stateClass = nameGraph[name];\r\n\r\n      if (!stateClass[META_KEY]) {\r\n        throw new Error('States must be decorated with @State() decorator');\r\n      }\r\n\r\n      const depth = depths[name];\r\n      const { actions } = stateClass[META_KEY];\r\n      let { defaults } = stateClass[META_KEY];\r\n\r\n      stateClass[META_KEY].path = depth;\r\n\r\n      // ensure our store hasn't already been added\r\n      // but dont throw since it could be lazy\r\n      // loaded from different paths\r\n      const has = this.states.find(s => s.name === name);\r\n      if (!has) {\r\n        // create new instance of defaults\r\n        if (Array.isArray(defaults)) {\r\n          defaults = [...defaults];\r\n        } else if (isObject(defaults)) {\r\n          defaults = { ...defaults };\r\n        } else if (defaults === undefined) {\r\n          defaults = {};\r\n        }\r\n\r\n        const instance = this._injector.get(stateClass);\r\n\r\n        mappedStores.push({\r\n          actions,\r\n          instance,\r\n          defaults,\r\n          name,\r\n          depth\r\n        });\r\n      }\r\n    }\r\n\r\n    this.states.push(...mappedStores);\r\n\r\n    return mappedStores;\r\n  }\r\n\r\n  /**\r\n   * Add a set of states to the store and return the defaulsts\r\n   */\r\n  addAndReturnDefaults(stateClasses: any[]): { defaults: any; states: MappedStore[] } {\r\n    if (stateClasses) {\r\n      const states = this.add(stateClasses);\r\n      const defaults = states.reduce(\r\n        (result: any, meta: MappedStore) => setValue(result, meta.depth, meta.defaults),\r\n        {}\r\n      );\r\n      return { defaults, states };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Bind the actions to the handlers\r\n   */\r\n  connectActionHandlers() {\r\n    if (this._connected) return;\r\n    this._actions\r\n      .pipe(\r\n        filter((ctx: ActionContext) => ctx.status === ActionStatus.Dispatched),\r\n        mergeMap(({ action }) =>\r\n          this.invokeActions(this._actions, action).pipe(\r\n            map(() => <ActionContext>{ action, status: ActionStatus.Successful }),\r\n            defaultIfEmpty(<ActionContext>{ action, status: ActionStatus.Canceled }),\r\n            catchError(error => of(<ActionContext>{ action, status: ActionStatus.Errored, error }))\r\n          )\r\n        )\r\n      )\r\n      .subscribe(ctx => this._actionResults.next(ctx));\r\n    this._connected = true;\r\n  }\r\n\r\n  /**\r\n   * Invoke the init function on the states.\r\n   */\r\n  invokeInit(stateMetadatas: MappedStore[]) {\r\n    for (const metadata of stateMetadatas) {\r\n      const instance: NgxsLifeCycle = metadata.instance;\r\n\r\n      if (instance.ngxsOnInit) {\r\n        const stateContext = this.createStateContext(metadata);\r\n        instance.ngxsOnInit(stateContext);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Invoke actions on the states.\r\n   */\r\n  invokeActions(actions$: InternalActions, action) {\r\n    const results = [];\r\n\r\n    for (const metadata of this.states) {\r\n      const type = getActionTypeFromInstance(action);\r\n      const actionMetas = metadata.actions[type];\r\n\r\n      if (actionMetas) {\r\n        for (const actionMeta of actionMetas) {\r\n          const stateContext = this.createStateContext(metadata);\r\n          try {\r\n            let result = metadata.instance[actionMeta.fn](stateContext, action);\r\n\r\n            if (result instanceof Promise) {\r\n              result = from(result);\r\n            }\r\n\r\n            if (result instanceof Observable) {\r\n              result = result.pipe(\r\n                actionMeta.options.cancelUncompleted\r\n                  ? takeUntil(actions$.pipe(ofActionDispatched(action)))\r\n                  : map(r => r)\r\n              ); // map acts like a noop\r\n            } else {\r\n              result = of({}).pipe(shareReplay());\r\n            }\r\n\r\n            results.push(result);\r\n          } catch (e) {\r\n            results.push(throwError(e));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!results.length) {\r\n      results.push(of({}));\r\n    }\r\n\r\n    return forkJoin(results);\r\n  }\r\n\r\n  /**\r\n   * Create the state context\r\n   */\r\n  private createStateContext(metadata: MappedStore) {\r\n    return this._stateContextFactory.createStateContext(metadata);\r\n  }\r\n}\r\n"
  ],
  "names": [],
  "mappings": "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"
}
