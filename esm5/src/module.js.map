{
  "version": 3,
  "file": "module.js",
  "sources": [
    "ng://@ngxs/store/packages/store/src/module.ts"
  ],
  "sourcesContent": [
    "import { NgModule, ModuleWithProviders, Optional, Inject, InjectionToken } from '@angular/core';\r\n\r\nimport { ROOT_STATE_TOKEN, FEATURE_STATE_TOKEN, NgxsConfig } from './symbols';\r\nimport { StateFactory } from './internal/state-factory';\r\nimport { StateContextFactory } from './internal/state-context-factory';\r\nimport { Actions, InternalActions } from './actions-stream';\r\nimport { InternalDispatcher, InternalDispatchedActionResults } from './internal/dispatcher';\r\nimport { InternalStateOperations } from './internal/state-operations';\r\nimport { Store } from './store';\r\nimport { SelectFactory } from './decorators/select';\r\nimport { StateStream } from './internal/state-stream';\r\nimport { PluginManager } from './plugin-manager';\r\nimport { InitState, UpdateState } from './actions/actions';\r\n\r\n/**\r\n * Root module\r\n * @ignore\r\n */\r\n@NgModule()\r\nexport class NgxsRootModule {\r\n  constructor(\r\n    factory: StateFactory,\r\n    internalStateOperations: InternalStateOperations,\r\n    store: Store,\r\n    select: SelectFactory,\r\n    @Optional()\r\n    @Inject(ROOT_STATE_TOKEN)\r\n    states: any[]\r\n  ) {\r\n    // add stores to the state graph and return their defaults\r\n    const results = factory.addAndReturnDefaults(states);\r\n\r\n    const stateOperations = internalStateOperations.getRootStateOperations();\r\n    if (results) {\r\n      // get our current stream\r\n      const cur = stateOperations.getState();\r\n\r\n      // set the state to the current + new\r\n      stateOperations.setState({ ...cur, ...results.defaults });\r\n    }\r\n\r\n    // connect our actions stream\r\n    factory.connectActionHandlers();\r\n\r\n    // dispatch the init action and invoke init function after\r\n    stateOperations.dispatch(new InitState()).subscribe(() => {\r\n      if (results) {\r\n        factory.invokeInit(results.states);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Feature module\r\n * @ignore\r\n */\r\n@NgModule({})\r\nexport class NgxsFeatureModule {\r\n  constructor(\r\n    store: Store,\r\n    internalStateOperations: InternalStateOperations,\r\n    factory: StateFactory,\r\n    @Optional()\r\n    @Inject(FEATURE_STATE_TOKEN)\r\n    states: any[][]\r\n  ) {\r\n    // Since FEATURE_STATE_TOKEN is a multi token, we need to\r\n    // flatten it [[Feature1State, Feature2State], [Feature3State]]\r\n    const flattenedStates = ([] as any[]).concat(...states);\r\n\r\n    // add stores to the state graph and return their defaults\r\n    const results = factory.addAndReturnDefaults(flattenedStates);\r\n\r\n    const stateOperations = internalStateOperations.getRootStateOperations();\r\n    if (results) {\r\n      // get our current stream\r\n      const cur = stateOperations.getState();\r\n\r\n      // set the state to the current + new\r\n      stateOperations.setState({ ...cur, ...results.defaults });\r\n    }\r\n\r\n    stateOperations.dispatch(new UpdateState()).subscribe(() => {\r\n      if (results) {\r\n        factory.invokeInit(results.states);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport type ModuleOptions = Partial<NgxsConfig>;\r\n\r\nexport function ngxsConfigFactory(options: ModuleOptions): NgxsConfig {\r\n  const config = Object.assign(new NgxsConfig(), options);\r\n  return config;\r\n}\r\n\r\nexport const ROOT_OPTIONS = new InjectionToken('ROOT_OPTIONS');\r\n\r\n/**\r\n * Ngxs Module\r\n */\r\n@NgModule({})\r\nexport class NgxsModule {\r\n  /**\r\n   * Root module factory\r\n   */\r\n  static forRoot(states: any[] = [], options: ModuleOptions = {}): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxsRootModule,\r\n      providers: [\r\n        StateFactory,\r\n        StateContextFactory,\r\n        Actions,\r\n        InternalActions,\r\n        InternalDispatcher,\r\n        InternalDispatchedActionResults,\r\n        InternalStateOperations,\r\n        Store,\r\n        StateStream,\r\n        SelectFactory,\r\n        PluginManager,\r\n        ...states,\r\n        {\r\n          provide: ROOT_STATE_TOKEN,\r\n          useValue: states\r\n        },\r\n        {\r\n          provide: ROOT_OPTIONS,\r\n          useValue: options\r\n        },\r\n        {\r\n          provide: NgxsConfig,\r\n          useFactory: ngxsConfigFactory,\r\n          deps: [ROOT_OPTIONS]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Feature module factory\r\n   */\r\n  static forFeature(states: any[]): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxsFeatureModule,\r\n      providers: [\r\n        StateFactory,\r\n        PluginManager,\r\n        ...states,\r\n        {\r\n          provide: FEATURE_STATE_TOKEN,\r\n          multi: true,\r\n          useValue: states\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"
  ],
  "names": [],
  "mappings": "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"
}
