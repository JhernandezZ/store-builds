{
  "version": 3,
  "file": "ngxs-store.js",
  "sources": [
    "ng://@ngxs/store/packages/store/src/decorators/selector.ts",
    "ng://@ngxs/store/packages/store/src/decorators/state.ts",
    "ng://@ngxs/store/packages/store/src/decorators/action.ts",
    "ng://@ngxs/store/packages/store/src/module.ts",
    "ng://@ngxs/store/packages/store/src/actions/actions.ts",
    "ng://@ngxs/store/packages/store/src/decorators/select.ts",
    "ng://@ngxs/store/packages/store/src/store.ts",
    "ng://@ngxs/store/packages/store/src/utils/selector-utils.ts",
    "ng://@ngxs/store/packages/store/src/utils/memoize.ts",
    "ng://@ngxs/store/packages/store/src/internal/state-factory.ts",
    "ng://@ngxs/store/packages/store/src/internal/state-context-factory.ts",
    "ng://@ngxs/store/packages/store/src/internal/state-operations.ts",
    "ng://@ngxs/store/packages/store/src/utils/freeze.ts",
    "ng://@ngxs/store/packages/store/src/internal/dispatcher.ts",
    "ng://@ngxs/store/packages/store/src/plugin-manager.ts",
    "ng://@ngxs/store/packages/store/src/internal/state-stream.ts",
    "ng://@ngxs/store/packages/store/src/utils/compose.ts",
    "ng://@ngxs/store/packages/store/src/actions-stream.ts",
    "ng://@ngxs/store/packages/store/src/operators/zone.ts",
    "ng://@ngxs/store/packages/store/src/operators/of-action.ts",
    "ng://@ngxs/store/packages/store/src/utils/utils.ts",
    "ng://@ngxs/store/packages/store/src/internal/internals.ts",
    "ng://@ngxs/store/packages/store/src/symbols.ts"
  ],
  "sourcesContent": [
    "import { createSelector } from '../utils/selector-utils';\r\n\r\n/**\r\n * Decorator for memoizing a state selector.\r\n */\r\nexport function Selector(selectors?: any[]) {\r\n  return (target: any, key: string, descriptor: PropertyDescriptor) => {\r\n    if (descriptor.value !== null) {\r\n      const originalFn = descriptor.value;\r\n\r\n      const memoizedFn = createSelector(selectors, originalFn, { containerClass: target, selectorName: key });\r\n\r\n      return {\r\n        configurable: true,\r\n        get() {\r\n          return memoizedFn;\r\n        }\r\n      };\r\n    } else {\r\n      throw new Error('Selectors only work on methods');\r\n    }\r\n  };\r\n}\r\n",
    "import { ensureStoreMetadata } from '../internal/internals';\r\nimport { StoreOptions, META_KEY } from '../symbols';\r\n\r\nconst stateNameRegex = new RegExp('^[a-zA-Z0-9]+$');\r\n\r\n/**\r\n * Error message\r\n * @ignore\r\n */\r\nexport const stateNameErrorMessage = name =>\r\n  `${name} is not a valid state name. It needs to be a valid object property name.`;\r\n\r\n/**\r\n * Decorates a class with ngxs state information.\r\n */\r\nexport function State<T>(options: StoreOptions<T>) {\r\n  return function(target: any) {\r\n    const meta = ensureStoreMetadata(target);\r\n\r\n    // Handle inheritance\r\n    if (Object.getPrototypeOf(target).hasOwnProperty(META_KEY)) {\r\n      const parentMeta = Object.getPrototypeOf(target)[META_KEY];\r\n\r\n      meta.actions = {\r\n        ...meta.actions,\r\n        ...parentMeta.actions\r\n      };\r\n    }\r\n\r\n    meta.children = options.children;\r\n    meta.defaults = options.defaults;\r\n    meta.name = options.name;\r\n\r\n    if (!options.name) {\r\n      throw new Error(`States must register a 'name' property`);\r\n    }\r\n\r\n    if (!stateNameRegex.test(options.name)) {\r\n      throw new Error(stateNameErrorMessage(options.name));\r\n    }\r\n  };\r\n}\r\n",
    "import { ensureStoreMetadata } from '../internal/internals';\r\nimport { ActionOptions } from '../symbols';\r\n\r\n/**\r\n * Decorates a method with a action information.\r\n */\r\nexport function Action(actions: any | any[], options?: ActionOptions) {\r\n  return function(target: any, name: string, descriptor: TypedPropertyDescriptor<any>) {\r\n    const meta = ensureStoreMetadata(target.constructor);\r\n\r\n    if (!Array.isArray(actions)) {\r\n      actions = [actions];\r\n    }\r\n\r\n    for (const action of actions) {\r\n      const type = action.type;\r\n\r\n      if (!action.type) {\r\n        throw new Error(`Action ${action.name} is missing a static \"type\" property`);\r\n      }\r\n\r\n      if (!meta.actions[type]) {\r\n        meta.actions[type] = [];\r\n      }\r\n\r\n      meta.actions[type].push({\r\n        fn: name,\r\n        options: options || {},\r\n        type\r\n      });\r\n    }\r\n  };\r\n}\r\n",
    "import { NgModule, ModuleWithProviders, Optional, Inject, InjectionToken } from '@angular/core';\r\n\r\nimport { ROOT_STATE_TOKEN, FEATURE_STATE_TOKEN, NgxsConfig } from './symbols';\r\nimport { StateFactory } from './internal/state-factory';\r\nimport { StateContextFactory } from './internal/state-context-factory';\r\nimport { Actions, InternalActions } from './actions-stream';\r\nimport { InternalDispatcher, InternalDispatchedActionResults } from './internal/dispatcher';\r\nimport { InternalStateOperations } from './internal/state-operations';\r\nimport { Store } from './store';\r\nimport { SelectFactory } from './decorators/select';\r\nimport { StateStream } from './internal/state-stream';\r\nimport { PluginManager } from './plugin-manager';\r\nimport { InitState, UpdateState } from './actions/actions';\r\n\r\n/**\r\n * Root module\r\n * @ignore\r\n */\r\n@NgModule()\r\nexport class NgxsRootModule {\r\n  constructor(\r\n    factory: StateFactory,\r\n    internalStateOperations: InternalStateOperations,\r\n    store: Store,\r\n    select: SelectFactory,\r\n    @Optional()\r\n    @Inject(ROOT_STATE_TOKEN)\r\n    states: any[]\r\n  ) {\r\n    // add stores to the state graph and return their defaults\r\n    const results = factory.addAndReturnDefaults(states);\r\n\r\n    const stateOperations = internalStateOperations.getRootStateOperations();\r\n    if (results) {\r\n      // get our current stream\r\n      const cur = stateOperations.getState();\r\n\r\n      // set the state to the current + new\r\n      stateOperations.setState({ ...cur, ...results.defaults });\r\n    }\r\n\r\n    // connect our actions stream\r\n    factory.connectActionHandlers();\r\n\r\n    // dispatch the init action and invoke init function after\r\n    stateOperations.dispatch(new InitState()).subscribe(() => {\r\n      if (results) {\r\n        factory.invokeInit(results.states);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Feature module\r\n * @ignore\r\n */\r\n@NgModule({})\r\nexport class NgxsFeatureModule {\r\n  constructor(\r\n    store: Store,\r\n    internalStateOperations: InternalStateOperations,\r\n    factory: StateFactory,\r\n    @Optional()\r\n    @Inject(FEATURE_STATE_TOKEN)\r\n    states: any[][]\r\n  ) {\r\n    // Since FEATURE_STATE_TOKEN is a multi token, we need to\r\n    // flatten it [[Feature1State, Feature2State], [Feature3State]]\r\n    const flattenedStates = ([] as any[]).concat(...states);\r\n\r\n    // add stores to the state graph and return their defaults\r\n    const results = factory.addAndReturnDefaults(flattenedStates);\r\n\r\n    const stateOperations = internalStateOperations.getRootStateOperations();\r\n    if (results) {\r\n      // get our current stream\r\n      const cur = stateOperations.getState();\r\n\r\n      // set the state to the current + new\r\n      stateOperations.setState({ ...cur, ...results.defaults });\r\n    }\r\n\r\n    stateOperations.dispatch(new UpdateState()).subscribe(() => {\r\n      if (results) {\r\n        factory.invokeInit(results.states);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport type ModuleOptions = Partial<NgxsConfig>;\r\n\r\nexport function ngxsConfigFactory(options: ModuleOptions): NgxsConfig {\r\n  const config = Object.assign(new NgxsConfig(), options);\r\n  return config;\r\n}\r\n\r\nexport const ROOT_OPTIONS = new InjectionToken('ROOT_OPTIONS');\r\n\r\n/**\r\n * Ngxs Module\r\n */\r\n@NgModule({})\r\nexport class NgxsModule {\r\n  /**\r\n   * Root module factory\r\n   */\r\n  static forRoot(states: any[] = [], options: ModuleOptions = {}): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxsRootModule,\r\n      providers: [\r\n        StateFactory,\r\n        StateContextFactory,\r\n        Actions,\r\n        InternalActions,\r\n        InternalDispatcher,\r\n        InternalDispatchedActionResults,\r\n        InternalStateOperations,\r\n        Store,\r\n        StateStream,\r\n        SelectFactory,\r\n        PluginManager,\r\n        ...states,\r\n        {\r\n          provide: ROOT_STATE_TOKEN,\r\n          useValue: states\r\n        },\r\n        {\r\n          provide: ROOT_OPTIONS,\r\n          useValue: options\r\n        },\r\n        {\r\n          provide: NgxsConfig,\r\n          useFactory: ngxsConfigFactory,\r\n          deps: [ROOT_OPTIONS]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Feature module factory\r\n   */\r\n  static forFeature(states: any[]): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxsFeatureModule,\r\n      providers: [\r\n        StateFactory,\r\n        PluginManager,\r\n        ...states,\r\n        {\r\n          provide: FEATURE_STATE_TOKEN,\r\n          multi: true,\r\n          useValue: states\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n",
    "/**\r\n * Init action\r\n */\r\nexport class InitState {\r\n  static readonly type = '@@INIT';\r\n}\r\n\r\n/**\r\n * Update action\r\n */\r\nexport class UpdateState {\r\n  static readonly type = '@@UPDATE_STATE';\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\n\r\nimport { Store } from '../store';\r\nimport { fastPropGetter } from '../internal/internals';\r\nimport { META_KEY } from '../symbols';\r\n\r\n/**\r\n * Allows the select decorator to get access to the DI store.\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class SelectFactory {\r\n  static store: Store | undefined = undefined;\r\n  constructor(store: Store) {\r\n    SelectFactory.store = store;\r\n  }\r\n}\r\n\r\n/**\r\n * Decorator for selecting a slice of state from the store.\r\n */\r\nexport function Select(selectorOrFeature?, ...paths: string[]) {\r\n  return function(target: any, name: string) {\r\n    const selectorFnName = '__' + name + '__selector';\r\n\r\n    if (!selectorOrFeature) {\r\n      // if foo$ => make it just foo\r\n      selectorOrFeature = name.lastIndexOf('$') === name.length - 1 ? name.substring(0, name.length - 1) : name;\r\n    }\r\n\r\n    const createSelect = fn => {\r\n      const store = SelectFactory.store;\r\n\r\n      if (!store) {\r\n        throw new Error('SelectFactory not connected to store!');\r\n      }\r\n\r\n      return store.select(fn);\r\n    };\r\n\r\n    const createSelector = () => {\r\n      if (typeof selectorOrFeature === 'string') {\r\n        const propsArray = paths.length ? [selectorOrFeature, ...paths] : selectorOrFeature.split('.');\r\n\r\n        return fastPropGetter(propsArray);\r\n      } else if (selectorOrFeature[META_KEY] && selectorOrFeature[META_KEY].path) {\r\n        return fastPropGetter(selectorOrFeature[META_KEY].path.split('.'));\r\n      } else {\r\n        return selectorOrFeature;\r\n      }\r\n    };\r\n\r\n    if (target[selectorFnName]) {\r\n      throw new Error('You cannot use @Select decorator and a ' + selectorFnName + ' property.');\r\n    }\r\n\r\n    if (delete target[name]) {\r\n      Object.defineProperty(target, selectorFnName, {\r\n        writable: true,\r\n        enumerable: false,\r\n        configurable: true\r\n      });\r\n\r\n      Object.defineProperty(target, name, {\r\n        get: function() {\r\n          return this[selectorFnName] || (this[selectorFnName] = createSelect.apply(this, [createSelector()]));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n      });\r\n    }\r\n  };\r\n}\r\n",
    "import { Injectable, NgZone } from '@angular/core';\r\nimport { Observable, of, Subscription } from 'rxjs';\r\nimport { catchError, distinctUntilChanged, map, take } from 'rxjs/operators';\r\n\r\nimport { getSelectorFn } from './utils/selector-utils';\r\nimport { InternalStateOperations } from './internal/state-operations';\r\nimport { StateStream } from './internal/state-stream';\r\nimport { enterZone } from './operators/zone';\r\n\r\n@Injectable()\r\nexport class Store {\r\n  constructor(\r\n    private _ngZone: NgZone,\r\n    private _stateStream: StateStream,\r\n    private _internalStateOperations: InternalStateOperations\r\n  ) {}\r\n\r\n  /**\r\n   * Dispatches event(s).\r\n   */\r\n  dispatch(event: any | any[]): Observable<any> {\r\n    return this._internalStateOperations.getRootStateOperations().dispatch(event);\r\n  }\r\n\r\n  /**\r\n   * Selects a slice of data from the store.\r\n   */\r\n  select<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\r\n  select(selector: string | any): Observable<any>;\r\n  select(selector: any): Observable<any> {\r\n    const selectorFn = getSelectorFn(selector);\r\n    return this._stateStream.pipe(\r\n      map(selectorFn),\r\n      catchError(err => {\r\n        // if error is TypeError we swallow it to prevent usual errors with property access\r\n        if (err instanceof TypeError) {\r\n          return of(undefined);\r\n        }\r\n\r\n        // rethrow other errors\r\n        throw err;\r\n      }),\r\n      distinctUntilChanged(),\r\n      enterZone(this._ngZone)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Select one slice of data from the store.\r\n   */\r\n  selectOnce<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\r\n  selectOnce(selector: string | any): Observable<any>;\r\n  selectOnce(selector: any): Observable<any> {\r\n    return this.select(selector).pipe(take(1));\r\n  }\r\n\r\n  /**\r\n   * Select a snapshot from the state.\r\n   */\r\n  selectSnapshot<T>(selector: (state: any, ...states: any[]) => T): T;\r\n  selectSnapshot(selector: string | any): any;\r\n  selectSnapshot(selector: any): any {\r\n    const selectorFn = getSelectorFn(selector);\r\n    return selectorFn(this._stateStream.getValue());\r\n  }\r\n\r\n  /**\r\n   * Allow the user to subscribe to the root of the state\r\n   */\r\n  subscribe(fn?: any): Subscription {\r\n    return this._stateStream.pipe(enterZone(this._ngZone)).subscribe(fn);\r\n  }\r\n\r\n  /**\r\n   * Return the raw value of the state.\r\n   */\r\n  snapshot(): any {\r\n    return this._internalStateOperations.getRootStateOperations().getState();\r\n  }\r\n\r\n  /**\r\n   * Reset the state to a specific point in time. This method is useful\r\n   * for plugin's who need to modify the state directly or unit testing.\r\n   */\r\n  reset(state: any) {\r\n    return this._internalStateOperations.getRootStateOperations().setState(state);\r\n  }\r\n}\r\n",
    "import {\r\n  SelectFromState,\r\n  fastPropGetter,\r\n  ensureSelectorMetadata,\r\n  getSelectorMetadata,\r\n  getStoreMetadata\r\n} from '../internal/internals';\r\nimport { memoize } from '../utils/memoize';\r\n\r\n/**\r\n * Function for creating a selector\r\n * @param selectors The selectors to use to create the arguments of this function\r\n * @param originalFn The original function being made into a selector\r\n */\r\nexport function createSelector(\r\n  selectors: any[],\r\n  originalFn: any,\r\n  creationMetadata?: { containerClass: any; selectorName: string }\r\n) {\r\n  const wrappedFn = function wrappedSelectorFn(...args) {\r\n    const returnValue = originalFn(...args);\r\n    if (returnValue instanceof Function) {\r\n      const innerMemoizedFn = memoize.apply(null, [returnValue]);\r\n      return innerMemoizedFn;\r\n    }\r\n    return returnValue;\r\n  };\r\n  const memoizedFn = memoize(wrappedFn);\r\n  const containerClass = creationMetadata && creationMetadata.containerClass;\r\n\r\n  const fn = state => {\r\n    const results = [];\r\n\r\n    const selectorsToApply = [];\r\n\r\n    if (containerClass) {\r\n      // If we are on a state class, add it as the first selector parameter\r\n      const metadata = getStoreMetadata(containerClass);\r\n      if (metadata) {\r\n        selectorsToApply.push(containerClass);\r\n      }\r\n    }\r\n    if (selectors) {\r\n      selectorsToApply.push(...selectors);\r\n    }\r\n    // Determine arguments from the app state using the selectors\r\n    if (selectorsToApply) {\r\n      results.push(...selectorsToApply.map(a => getSelectorFn(a)(state)));\r\n    }\r\n\r\n    // if the lambda tries to access a something on the\r\n    // state that doesn't exist, it will throw a TypeError.\r\n    // since this is quite usual behaviour, we simply return undefined if so.\r\n    try {\r\n      return memoizedFn(...results);\r\n    } catch (ex) {\r\n      if (ex instanceof TypeError) {\r\n        return undefined;\r\n      }\r\n      throw ex;\r\n    }\r\n  };\r\n\r\n  const selectorMetaData = ensureSelectorMetadata(memoizedFn);\r\n  selectorMetaData.originalFn = originalFn;\r\n  selectorMetaData.selectFromAppState = fn;\r\n  if (creationMetadata) {\r\n    selectorMetaData.containerClass = creationMetadata.containerClass;\r\n    selectorMetaData.selectorName = creationMetadata.selectorName;\r\n  }\r\n  return memoizedFn;\r\n}\r\n\r\n/**\r\n * This function gets the selector function to be used to get the selected slice from the app state\r\n * @ignore\r\n */\r\nexport function getSelectorFn(selector: any): SelectFromState {\r\n  const selectorMetadata = getSelectorMetadata(selector);\r\n  if (selectorMetadata) {\r\n    const selectFromAppState = selectorMetadata.selectFromAppState;\r\n    if (selectFromAppState) {\r\n      return selectFromAppState;\r\n    }\r\n  }\r\n  const stateMetadata = getStoreMetadata(selector);\r\n  if (stateMetadata && stateMetadata.path) {\r\n    return fastPropGetter(stateMetadata.path.split('.'));\r\n  }\r\n  return selector;\r\n}\r\n",
    "function defaultEqualityCheck(a, b) {\r\n  return a === b;\r\n}\r\n\r\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\r\n  if (prev === null || next === null || prev.length !== next.length) {\r\n    return false;\r\n  }\r\n\r\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\r\n  const length = prev.length;\r\n  for (let i = 0; i < length; i++) {\r\n    if (!equalityCheck(prev[i], next[i])) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Memoize a function on its last inputs only.\r\n * Oringinally from: https://github.com/reduxjs/reselect/blob/master/src/index.js\r\n *\r\n * @ignore\r\n */\r\nexport function memoize(func, equalityCheck = defaultEqualityCheck) {\r\n  let lastArgs = null;\r\n  let lastResult = null;\r\n  // we reference arguments instead of spreading them for performance reasons\r\n  return <(...args) => any>function memoized() {\r\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\r\n      // apply arguments instead of spreading for performance.\r\n      lastResult = func.apply(null, arguments);\r\n    }\r\n\r\n    lastArgs = arguments;\r\n    return lastResult;\r\n  };\r\n}\r\n",
    "import { Injector, Injectable, SkipSelf, Optional } from '@angular/core';\r\nimport { Observable, of, forkJoin, from, throwError } from 'rxjs';\r\nimport { shareReplay, takeUntil, map, catchError, filter, mergeMap, defaultIfEmpty } from 'rxjs/operators';\r\n\r\nimport { META_KEY, NgxsLifeCycle } from '../symbols';\r\nimport {\r\n  topologicalSort,\r\n  buildGraph,\r\n  findFullParentPath,\r\n  nameToState,\r\n  isObject,\r\n  StateClass,\r\n  MappedStore\r\n} from './internals';\r\nimport { getActionTypeFromInstance, setValue } from '../utils/utils';\r\nimport { ofActionDispatched } from '../operators/of-action';\r\nimport { InternalActions, ActionStatus, ActionContext } from '../actions-stream';\r\nimport { InternalDispatchedActionResults } from '../internal/dispatcher';\r\nimport { StateContextFactory } from '../internal/state-context-factory';\r\n\r\n/**\r\n * State factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateFactory {\r\n  get states(): MappedStore[] {\r\n    return this._parentFactory ? this._parentFactory.states : this._states;\r\n  }\r\n\r\n  private _states: MappedStore[] = [];\r\n  private _connected = false;\r\n\r\n  constructor(\r\n    private _injector: Injector,\r\n    @Optional()\r\n    @SkipSelf()\r\n    private _parentFactory: StateFactory,\r\n    private _actions: InternalActions,\r\n    private _actionResults: InternalDispatchedActionResults,\r\n    private _stateContextFactory: StateContextFactory\r\n  ) {}\r\n\r\n  /**\r\n   * Add a new state to the global defs.\r\n   */\r\n  add(oneOrManyStateClasses: StateClass | StateClass[]): MappedStore[] {\r\n    let stateClasses: StateClass[];\r\n    if (!Array.isArray(oneOrManyStateClasses)) {\r\n      stateClasses = [oneOrManyStateClasses];\r\n    } else {\r\n      stateClasses = oneOrManyStateClasses;\r\n    }\r\n\r\n    const stateGraph = buildGraph(stateClasses);\r\n    const sortedStates = topologicalSort(stateGraph);\r\n    const depths = findFullParentPath(stateGraph);\r\n    const nameGraph = nameToState(stateClasses);\r\n    const mappedStores: MappedStore[] = [];\r\n\r\n    for (const name of sortedStates) {\r\n      const stateClass = nameGraph[name];\r\n\r\n      if (!stateClass[META_KEY]) {\r\n        throw new Error('States must be decorated with @State() decorator');\r\n      }\r\n\r\n      const depth = depths[name];\r\n      const { actions } = stateClass[META_KEY];\r\n      let { defaults } = stateClass[META_KEY];\r\n\r\n      stateClass[META_KEY].path = depth;\r\n\r\n      // ensure our store hasn't already been added\r\n      // but dont throw since it could be lazy\r\n      // loaded from different paths\r\n      const has = this.states.find(s => s.name === name);\r\n      if (!has) {\r\n        // create new instance of defaults\r\n        if (Array.isArray(defaults)) {\r\n          defaults = [...defaults];\r\n        } else if (isObject(defaults)) {\r\n          defaults = { ...defaults };\r\n        } else if (defaults === undefined) {\r\n          defaults = {};\r\n        }\r\n\r\n        const instance = this._injector.get(stateClass);\r\n\r\n        mappedStores.push({\r\n          actions,\r\n          instance,\r\n          defaults,\r\n          name,\r\n          depth\r\n        });\r\n      }\r\n    }\r\n\r\n    this.states.push(...mappedStores);\r\n\r\n    return mappedStores;\r\n  }\r\n\r\n  /**\r\n   * Add a set of states to the store and return the defaulsts\r\n   */\r\n  addAndReturnDefaults(stateClasses: any[]): { defaults: any; states: MappedStore[] } {\r\n    if (stateClasses) {\r\n      const states = this.add(stateClasses);\r\n      const defaults = states.reduce(\r\n        (result: any, meta: MappedStore) => setValue(result, meta.depth, meta.defaults),\r\n        {}\r\n      );\r\n      return { defaults, states };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Bind the actions to the handlers\r\n   */\r\n  connectActionHandlers() {\r\n    if (this._connected) return;\r\n    this._actions\r\n      .pipe(\r\n        filter((ctx: ActionContext) => ctx.status === ActionStatus.Dispatched),\r\n        mergeMap(({ action }) =>\r\n          this.invokeActions(this._actions, action).pipe(\r\n            map(() => <ActionContext>{ action, status: ActionStatus.Successful }),\r\n            defaultIfEmpty(<ActionContext>{ action, status: ActionStatus.Canceled }),\r\n            catchError(error => of(<ActionContext>{ action, status: ActionStatus.Errored, error }))\r\n          )\r\n        )\r\n      )\r\n      .subscribe(ctx => this._actionResults.next(ctx));\r\n    this._connected = true;\r\n  }\r\n\r\n  /**\r\n   * Invoke the init function on the states.\r\n   */\r\n  invokeInit(stateMetadatas: MappedStore[]) {\r\n    for (const metadata of stateMetadatas) {\r\n      const instance: NgxsLifeCycle = metadata.instance;\r\n\r\n      if (instance.ngxsOnInit) {\r\n        const stateContext = this.createStateContext(metadata);\r\n        instance.ngxsOnInit(stateContext);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Invoke actions on the states.\r\n   */\r\n  invokeActions(actions$: InternalActions, action) {\r\n    const results = [];\r\n\r\n    for (const metadata of this.states) {\r\n      const type = getActionTypeFromInstance(action);\r\n      const actionMetas = metadata.actions[type];\r\n\r\n      if (actionMetas) {\r\n        for (const actionMeta of actionMetas) {\r\n          const stateContext = this.createStateContext(metadata);\r\n          try {\r\n            let result = metadata.instance[actionMeta.fn](stateContext, action);\r\n\r\n            if (result instanceof Promise) {\r\n              result = from(result);\r\n            }\r\n\r\n            if (result instanceof Observable) {\r\n              result = result.pipe(\r\n                actionMeta.options.cancelUncompleted\r\n                  ? takeUntil(actions$.pipe(ofActionDispatched(action)))\r\n                  : map(r => r)\r\n              ); // map acts like a noop\r\n            } else {\r\n              result = of({}).pipe(shareReplay());\r\n            }\r\n\r\n            results.push(result);\r\n          } catch (e) {\r\n            results.push(throwError(e));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!results.length) {\r\n      results.push(of({}));\r\n    }\r\n\r\n    return forkJoin(results);\r\n  }\r\n\r\n  /**\r\n   * Create the state context\r\n   */\r\n  private createStateContext(metadata: MappedStore) {\r\n    return this._stateContextFactory.createStateContext(metadata);\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { StateContext } from '../symbols';\r\nimport { MappedStore } from '../internal/internals';\r\nimport { setValue, getValue } from '../utils/utils';\r\nimport { InternalStateOperations } from '../internal/state-operations';\r\n\r\n/**\r\n * State Context factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateContextFactory {\r\n  constructor(private _internalStateOperations: InternalStateOperations) {}\r\n\r\n  /**\r\n   * Create the state context\r\n   */\r\n  createStateContext(metadata: MappedStore): StateContext<any> {\r\n    const root = this._internalStateOperations.getRootStateOperations();\r\n    return {\r\n      getState(): any {\r\n        const state = root.getState();\r\n        return getValue(state, metadata.depth);\r\n      },\r\n      patchState(val: any): any {\r\n        const isArray = Array.isArray(val);\r\n        const isPrimitive = typeof val !== 'object';\r\n\r\n        if (isArray) {\r\n          throw new Error('Patching arrays is not supported.');\r\n        } else if (isPrimitive) {\r\n          throw new Error('Patching primitives is not supported.');\r\n        }\r\n\r\n        const state = root.getState();\r\n        const local = getValue(state, metadata.depth);\r\n        const clone = { ...local };\r\n\r\n        for (const k in val) {\r\n          clone[k] = val[k];\r\n        }\r\n\r\n        const newState = setValue(state, metadata.depth, clone);\r\n        root.setState(newState);\r\n        return newState;\r\n      },\r\n      setState(val: any): any {\r\n        let state = root.getState();\r\n        state = setValue(state, metadata.depth, val);\r\n        root.setState(state);\r\n        return state;\r\n      },\r\n      dispatch(actions: any | any[]): Observable<any> {\r\n        return root.dispatch(actions);\r\n      }\r\n    };\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\n\r\nimport { StateOperations } from '../internal/internals';\r\nimport { InternalDispatcher } from '../internal/dispatcher';\r\nimport { StateStream } from './state-stream';\r\nimport { NgxsConfig } from '../symbols';\r\nimport { deepFreeze } from '../utils/freeze';\r\n\r\n/**\r\n * State Context factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class InternalStateOperations {\r\n  constructor(\r\n    private _stateStream: StateStream,\r\n    private _dispatcher: InternalDispatcher,\r\n    private _config: NgxsConfig\r\n  ) {}\r\n\r\n  /**\r\n   * Returns the root state operators.\r\n   */\r\n  getRootStateOperations(): StateOperations<any> {\r\n    const rootStateOperations = {\r\n      getState: () => this._stateStream.getValue(),\r\n      setState: newState => this._stateStream.next(newState),\r\n      dispatch: actions => this._dispatcher.dispatch(actions)\r\n    };\r\n\r\n    if (this._config.developmentMode) {\r\n      return this.ensureStateAndActionsAreImmutable(rootStateOperations);\r\n    }\r\n\r\n    return rootStateOperations;\r\n  }\r\n\r\n  private ensureStateAndActionsAreImmutable(root: StateOperations<any>): StateOperations<any> {\r\n    return {\r\n      getState: () => root.getState(),\r\n      setState: value => {\r\n        const frozenValue = deepFreeze(value);\r\n        return root.setState(frozenValue);\r\n      },\r\n      dispatch: actions => {\r\n        return root.dispatch(actions);\r\n      }\r\n    };\r\n  }\r\n}\r\n",
    "/**\r\n * Object freeze code\r\n * https://github.com/jsdf/deep-freeze\r\n */\r\nexport const deepFreeze = o => {\r\n  Object.freeze(o);\r\n\r\n  const oIsFunction = typeof o === 'function';\r\n  const hasOwnProp = Object.prototype.hasOwnProperty;\r\n\r\n  Object.getOwnPropertyNames(o).forEach(function(prop) {\r\n    if (\r\n      hasOwnProp.call(o, prop) &&\r\n      (oIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true) &&\r\n      o[prop] !== null &&\r\n      (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\r\n      !Object.isFrozen(o[prop])\r\n    ) {\r\n      deepFreeze(o[prop]);\r\n    }\r\n  });\r\n\r\n  return o;\r\n};\r\n",
    "import { Injectable, ErrorHandler, NgZone } from '@angular/core';\r\nimport { Observable, of, forkJoin, empty, Subject, throwError } from 'rxjs';\r\nimport { shareReplay, filter, exhaustMap, take } from 'rxjs/operators';\r\n\r\nimport { compose } from '../utils/compose';\r\nimport { InternalActions, ActionStatus, ActionContext } from '../actions-stream';\r\nimport { StateStream } from './state-stream';\r\nimport { PluginManager } from '../plugin-manager';\r\nimport { enterZone } from '../operators/zone';\r\n\r\n/**\r\n * Internal Action result stream that is emitted when an action is completed.\r\n * This is used as a method of returning the action result to the dispatcher\r\n * for the observable returned by the dispatch(...) call.\r\n * The dispatcher then asynchronously pushes the result from this stream onto the main action stream as a result.\r\n */\r\n@Injectable()\r\nexport class InternalDispatchedActionResults extends Subject<ActionContext> {}\r\n\r\n@Injectable()\r\nexport class InternalDispatcher {\r\n  constructor(\r\n    private _errorHandler: ErrorHandler,\r\n    private _actions: InternalActions,\r\n    private _actionResults: InternalDispatchedActionResults,\r\n    private _pluginManager: PluginManager,\r\n    private _stateStream: StateStream,\r\n    private _ngZone: NgZone\r\n  ) {}\r\n\r\n  /**\r\n   * Dispatches event(s).\r\n   */\r\n  dispatch(event: any | any[]): Observable<any> {\r\n    const result: Observable<any> = this._ngZone.runOutsideAngular(() => {\r\n      if (Array.isArray(event)) {\r\n        return forkJoin(event.map(a => this.dispatchSingle(a)));\r\n      } else {\r\n        return this.dispatchSingle(event);\r\n      }\r\n    });\r\n\r\n    result.subscribe({\r\n      error: error => this._ngZone.run(() => this._errorHandler.handleError(error))\r\n    });\r\n\r\n    return result.pipe(enterZone(this._ngZone));\r\n  }\r\n\r\n  private dispatchSingle(action: any): Observable<any> {\r\n    const prevState = this._stateStream.getValue();\r\n    const plugins = this._pluginManager.plugins;\r\n\r\n    return (compose([\r\n      ...plugins,\r\n      (nextState, nextAction) => {\r\n        if (nextState !== prevState) {\r\n          this._stateStream.next(nextState);\r\n        }\r\n        const actionResult$ = this.getActionResultStream(nextAction);\r\n        actionResult$.subscribe(ctx => this._actions.next(ctx));\r\n        this._actions.next({ action: nextAction, status: ActionStatus.Dispatched });\r\n        return this.createDispatchObservable(actionResult$);\r\n      }\r\n    ])(prevState, action) as Observable<any>).pipe(shareReplay());\r\n  }\r\n\r\n  private getActionResultStream(action: any): Observable<ActionContext> {\r\n    return this._actionResults.pipe(\r\n      filter((ctx: ActionContext) => ctx.action === action && ctx.status !== ActionStatus.Dispatched),\r\n      take(1),\r\n      shareReplay()\r\n    );\r\n  }\r\n\r\n  private createDispatchObservable(actionResult$: Observable<ActionContext>): Observable<any> {\r\n    return actionResult$\r\n      .pipe(\r\n        exhaustMap((ctx: ActionContext) => {\r\n          switch (ctx.status) {\r\n            case ActionStatus.Successful:\r\n              return of(this._stateStream.getValue());\r\n            case ActionStatus.Errored:\r\n              return throwError(ctx.error);\r\n            default:\r\n              return empty();\r\n          }\r\n        })\r\n      )\r\n      .pipe(shareReplay());\r\n  }\r\n}\r\n",
    "import { Injectable, Optional, SkipSelf, Inject } from '@angular/core';\r\nimport { NgxsPluginFn, NGXS_PLUGINS, NgxsPlugin } from './symbols';\r\n\r\n/**\r\n * Plugin manager class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class PluginManager {\r\n  plugins: NgxsPluginFn[] = [];\r\n\r\n  constructor(\r\n    @Optional()\r\n    @SkipSelf()\r\n    private _parentManager: PluginManager,\r\n    @Inject(NGXS_PLUGINS)\r\n    @Optional()\r\n    private _plugins: NgxsPlugin[]\r\n  ) {\r\n    this.register();\r\n  }\r\n\r\n  private register() {\r\n    if (!this._plugins) {\r\n      return;\r\n    }\r\n\r\n    this.plugins = this._plugins.map(plugin => {\r\n      if (plugin.handle) {\r\n        return plugin.handle.bind(plugin);\r\n      } else {\r\n        return plugin;\r\n      }\r\n    });\r\n\r\n    if (this._parentManager) {\r\n      this._parentManager.plugins.push(...this.plugins);\r\n    }\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n/**\r\n * BehaviorSubject of the entire state.\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateStream extends BehaviorSubject<any> {\r\n  constructor() {\r\n    super({});\r\n  }\r\n}\r\n",
    "/**\r\n * Composes a array of functions from left to right. Example:\r\n *\r\n *      compose([fn, final])(state, action);\r\n *\r\n * then the funcs have a signature like:\r\n *\r\n *      function fn (state, action, next) {\r\n *          console.log('here', state, action, next);\r\n *          return next(state, action);\r\n *      }\r\n *\r\n *      function final (state, action) {\r\n *          console.log('here', state, action);\r\n *          return state;\r\n *      }\r\n *\r\n * the last function should not call `next`.\r\n *\r\n * @ignore\r\n */\r\nexport const compose = funcs => (...args) => {\r\n  const curr = funcs.shift();\r\n  return curr(...args, (...nextArgs) => compose(funcs)(...nextArgs));\r\n};\r\n",
    "import { Injectable, NgZone } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nimport { enterZone } from './operators/zone';\r\n\r\n/**\r\n * Status of a dispatched action\r\n */\r\nexport const enum ActionStatus {\r\n  Dispatched = 'DISPATCHED',\r\n  Successful = 'SUCCESSFUL',\r\n  Canceled = 'CANCELED',\r\n  Errored = 'ERRORED'\r\n}\r\n\r\nexport interface ActionContext {\r\n  status: ActionStatus;\r\n  action: any;\r\n  error?: Error;\r\n}\r\n\r\n/**\r\n * Custom Subject that ensures that subscribers are notified of values in the order that they arrived.\r\n * A standard Subject does not have this guarantee.\r\n * For example, given the following code:\r\n * ```typescript\r\n *   const subject = new Subject<string>();\r\n     subject.subscribe(value => {\r\n       if (value === 'start') subject.next('end');\r\n     });\r\n     subject.subscribe(value => { });\r\n     subject.next('start');\r\n * ```\r\n * When `subject` is a standard `Subject<T>` the second subscriber would recieve `end` and then `start`.\r\n * When `subject` is a `OrderedSubject<T>` the second subscriber would recieve `start` and then `end`.\r\n */\r\nexport class OrderedSubject<T> extends Subject<T> {\r\n  private _itemQueue: T[] = [];\r\n  private _busyPushingNext = false;\r\n\r\n  next(value?: T): void {\r\n    if (this._busyPushingNext) {\r\n      this._itemQueue.unshift(value);\r\n      return;\r\n    }\r\n    this._busyPushingNext = true;\r\n    super.next(value);\r\n    while (this._itemQueue.length > 0) {\r\n      const nextValue = this._itemQueue.pop();\r\n      super.next(nextValue);\r\n    }\r\n    this._busyPushingNext = false;\r\n  }\r\n}\r\n\r\n/**\r\n * Internal Action stream that is emitted anytime an action is dispatched.\r\n */\r\n@Injectable()\r\nexport class InternalActions extends OrderedSubject<ActionContext> {}\r\n\r\n/**\r\n * Action stream that is emitted anytime an action is dispatched.\r\n *\r\n * You can listen to this in services to react without stores.\r\n */\r\n@Injectable()\r\nexport class Actions extends Observable<any> {\r\n  constructor(actions$: InternalActions, ngZone: NgZone) {\r\n    super(observer => {\r\n      actions$\r\n        .pipe(enterZone(ngZone))\r\n        .subscribe(res => observer.next(res), err => observer.error(err), () => observer.complete());\r\n    });\r\n  }\r\n}\r\n",
    "import { Observable, Observer } from 'rxjs';\r\nimport { NgZone } from '@angular/core';\r\n\r\n/**\r\n * Operator to run the `subscribe` in a Angular zone.\r\n */\r\nexport function enterZone<T>(zone: NgZone) {\r\n  return (source: Observable<T>) => {\r\n    return new Observable((sink: Observer<T>) => {\r\n      return source.subscribe({\r\n        next(x) {\r\n          zone.run(() => sink.next(x));\r\n        },\r\n        error(e) {\r\n          zone.run(() => sink.error(e));\r\n        },\r\n        complete() {\r\n          zone.run(() => sink.complete());\r\n        }\r\n      });\r\n    });\r\n  };\r\n}\r\n",
    "import { OperatorFunction, Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\nimport { getActionTypeFromInstance } from '../utils/utils';\r\nimport { ActionContext, ActionStatus } from '../actions-stream';\r\n\r\nexport function ofAction<T>(allowedType): OperatorFunction<any, T>;\r\nexport function ofAction<T>(...allowedTypes): OperatorFunction<any, T>;\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will grab actions that have just been dispatched as well as actions that have completed\r\n */\r\nexport function ofAction(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been dispatched\r\n */\r\nexport function ofActionDispatched(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, ActionStatus.Dispatched);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been successfully completed\r\n */\r\nexport function ofActionSuccessful(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, ActionStatus.Successful);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been canceled\r\n */\r\nexport function ofActionCanceled(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, ActionStatus.Canceled);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just thrown an error\r\n */\r\nexport function ofActionErrored(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, ActionStatus.Errored);\r\n}\r\n\r\nfunction ofActionOperator(allowedTypes: any[], status?: ActionStatus) {\r\n  const allowedMap = createAllowedMap(allowedTypes);\r\n  return function(o: Observable<any>) {\r\n    return o.pipe(filterStatus(allowedMap, status), mapAction());\r\n  };\r\n}\r\n\r\nfunction filterStatus(allowedTypes: { [key: string]: boolean }, status?: ActionStatus) {\r\n  return filter((ctx: ActionContext) => {\r\n    const actionType = getActionTypeFromInstance(ctx.action);\r\n    const type = allowedTypes[actionType];\r\n    return status ? type && ctx.status === status : type;\r\n  });\r\n}\r\n\r\nfunction mapAction() {\r\n  return map((ctx: ActionContext) => ctx.action);\r\n}\r\n\r\nfunction createAllowedMap(types: any[]): { [key: string]: boolean } {\r\n  return types.reduce((acc: any, klass: any) => {\r\n    acc[getActionTypeFromInstance(klass)] = true;\r\n    return acc;\r\n  }, {});\r\n}\r\n",
    "/**\r\n * Returns the type from an action instance.\r\n * @ignore\r\n */\r\nexport function getActionTypeFromInstance(action: any): string {\r\n  if (action.constructor && action.constructor.type) {\r\n    return action.constructor.type;\r\n  }\r\n\r\n  return action.type;\r\n}\r\n\r\n/**\r\n * Matches a action\r\n * @ignore\r\n */\r\nexport function actionMatcher(action1: any) {\r\n  const type1 = getActionTypeFromInstance(action1);\r\n\r\n  return function(action2: any) {\r\n    return type1 === getActionTypeFromInstance(action2);\r\n  };\r\n}\r\n\r\n/**\r\n * Set a deeply nested value. Example:\r\n *\r\n *   setValue({ foo: { bar: { eat: false } } },\r\n *      'foo.bar.eat', true) //=> { foo: { bar: { eat: true } } }\r\n *\r\n * While it traverses it also creates new objects from top down.\r\n *\r\n * @ignore\r\n */\r\nexport const setValue = (obj: any, prop: string, val: any) => {\r\n  obj = { ...obj };\r\n\r\n  const split = prop.split('.');\r\n  const lastIndex = split.length - 1;\r\n\r\n  split.reduce((acc, part, index) => {\r\n    if (index === lastIndex) {\r\n      acc[part] = val;\r\n    } else {\r\n      acc[part] = { ...acc[part] };\r\n    }\r\n\r\n    return acc && acc[part];\r\n  }, obj);\r\n\r\n  return obj;\r\n};\r\n\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * @ignore\r\n */\r\nexport const getValue = (obj: any, prop: string) =>\r\n  prop.split('.').reduce((acc: any, part: string) => acc && acc[part], obj);\r\n",
    "import { META_KEY, ActionOptions, SELECTOR_META_KEY } from '../symbols';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface ObjectKeyMap<T> {\r\n  [key: string]: T;\r\n}\r\n\r\nexport interface StateClass {\r\n  [META_KEY]?: MetaDataModel;\r\n}\r\n\r\nexport type StateKeyGraph = ObjectKeyMap<string[]>;\r\n\r\nexport interface ActionHandlerMetaData {\r\n  fn: string;\r\n  options: ActionOptions;\r\n  type: string;\r\n}\r\n\r\nexport interface StateOperations<T> {\r\n  getState(): T;\r\n  setState(val: T);\r\n  dispatch(actions: any | any[]): Observable<void>;\r\n}\r\n\r\nexport interface MetaDataModel {\r\n  name: string;\r\n  actions: ObjectKeyMap<ActionHandlerMetaData[]>;\r\n  defaults: any;\r\n  path: string;\r\n  children: StateClass[];\r\n  instance: any;\r\n}\r\n\r\nexport type SelectFromState = (state: any) => any;\r\n\r\nexport interface SelectorMetaDataModel {\r\n  selectFromAppState: SelectFromState;\r\n  originalFn: Function;\r\n  containerClass: any;\r\n  selectorName: string;\r\n}\r\n\r\nexport interface MappedStore {\r\n  name: string;\r\n  actions: ObjectKeyMap<ActionHandlerMetaData[]>;\r\n  defaults: any;\r\n  instance: any;\r\n  depth: string;\r\n}\r\n\r\n/**\r\n * Ensures metadata is attached to the class and returns it.\r\n *\r\n * @ignore\r\n */\r\nexport function ensureStoreMetadata(target): MetaDataModel {\r\n  if (!target.hasOwnProperty(META_KEY)) {\r\n    const defaultMetadata: MetaDataModel = {\r\n      name: null,\r\n      actions: {},\r\n      defaults: {},\r\n      path: null,\r\n      children: [],\r\n      instance: null\r\n    };\r\n\r\n    Object.defineProperty(target, META_KEY, { value: defaultMetadata });\r\n  }\r\n  return getStoreMetadata(target);\r\n}\r\n\r\n/**\r\n * Get the metadata attached to the class if it exists.\r\n *\r\n * @ignore\r\n */\r\nexport function getStoreMetadata(target): MetaDataModel {\r\n  return target[META_KEY];\r\n}\r\n\r\n/**\r\n * Ensures metadata is attached to the selector and returns it.\r\n *\r\n * @ignore\r\n */\r\nexport function ensureSelectorMetadata(target): SelectorMetaDataModel {\r\n  if (!target.hasOwnProperty(SELECTOR_META_KEY)) {\r\n    const defaultMetadata: SelectorMetaDataModel = {\r\n      selectFromAppState: null,\r\n      originalFn: null,\r\n      containerClass: null,\r\n      selectorName: null\r\n    };\r\n\r\n    Object.defineProperty(target, SELECTOR_META_KEY, { value: defaultMetadata });\r\n  }\r\n\r\n  return getSelectorMetadata(target);\r\n}\r\n\r\n/**\r\n * Get the metadata attached to the selector if it exists.\r\n *\r\n * @ignore\r\n */\r\nexport function getSelectorMetadata(target): SelectorMetaDataModel {\r\n  return target[SELECTOR_META_KEY];\r\n}\r\n\r\n/**\r\n * The generated function is faster than:\r\n * - pluck (Observable operator)\r\n * - memoize\r\n *\r\n * @ignore\r\n */\r\nexport function fastPropGetter(paths: string[]): (x: any) => any {\r\n  const segments = paths;\r\n  let seg = 'store.' + segments[0];\r\n  let i = 0;\r\n  const l = segments.length;\r\n\r\n  let expr = seg;\r\n  while (++i < l) {\r\n    expr = expr + ' && ' + (seg = seg + '.' + segments[i]);\r\n  }\r\n\r\n  const fn = new Function('store', 'return ' + expr + ';');\r\n\r\n  return <(x: any) => any>fn;\r\n}\r\n\r\n/**\r\n * Given an array of states, it will return a object graph. Example:\r\n *    const states = [\r\n *      Cart,\r\n *      CartSaved,\r\n *      CartSavedItems\r\n *    ]\r\n *\r\n * would return:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function buildGraph(stateClasses: StateClass[]): StateKeyGraph {\r\n  const findName = (stateClass: StateClass) => {\r\n    const meta = stateClasses.find(g => g === stateClass);\r\n    if (!meta) {\r\n      throw new Error(`Child state not found: ${stateClass}`);\r\n    }\r\n\r\n    if (!meta[META_KEY]) {\r\n      throw new Error('States must be decorated with @State() decorator');\r\n    }\r\n\r\n    return meta[META_KEY].name;\r\n  };\r\n\r\n  return stateClasses.reduce<StateKeyGraph>((result: StateKeyGraph, stateClass: StateClass) => {\r\n    if (!stateClass[META_KEY]) {\r\n      throw new Error('States must be decorated with @State() decorator');\r\n    }\r\n\r\n    const { name, children } = stateClass[META_KEY];\r\n    result[name] = (children || []).map(findName);\r\n    return result;\r\n  }, {});\r\n}\r\n\r\n/**\r\n * Given a states array, returns object graph\r\n * returning the name and state metadata. Example:\r\n *\r\n *  const graph = {\r\n *    cart: { metadata }\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function nameToState(states: StateClass[]): ObjectKeyMap<StateClass> {\r\n  return states.reduce<ObjectKeyMap<StateClass>>((result: ObjectKeyMap<StateClass>, stateClass: StateClass) => {\r\n    if (!stateClass[META_KEY]) {\r\n      throw new Error('States must be decorated with @State() decorator');\r\n    }\r\n\r\n    const meta = stateClass[META_KEY];\r\n    result[meta.name] = stateClass;\r\n    return result;\r\n  }, {});\r\n}\r\n\r\n/**\r\n * Given a object relationship graph will return the full path\r\n * for the child items. Example:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * would return:\r\n *\r\n *  const r = {\r\n *    cart: 'cart',\r\n *    saved: 'cart.saved',\r\n *    items: 'cart.saved.items'\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function findFullParentPath(obj: StateKeyGraph, newObj: ObjectKeyMap<string> = {}): ObjectKeyMap<string> {\r\n  const visit = (child: StateKeyGraph, keyToFind: string): string => {\r\n    for (const key in child) {\r\n      if (child.hasOwnProperty(key) && child[key].indexOf(keyToFind) >= 0) {\r\n        const parent = visit(child, key);\r\n        return parent !== null ? `${parent}.${key}` : key;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  for (const key in obj) {\r\n    if (obj.hasOwnProperty(key)) {\r\n      const parent = visit(obj, key);\r\n      newObj[key] = parent ? `${parent}.${key}` : key;\r\n    }\r\n  }\r\n\r\n  return newObj;\r\n}\r\n\r\n/**\r\n * Given a object graph, it will return the items topologically sorted Example:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * would return:\r\n *\r\n *  const results = [\r\n *    'items',\r\n *    'saved',\r\n *    'cart'\r\n *  ];\r\n *\r\n * @ignore\r\n */\r\nexport function topologicalSort(graph: StateKeyGraph): string[] {\r\n  const sorted: string[] = [];\r\n  const visited: ObjectKeyMap<boolean> = {};\r\n\r\n  const visit = (name: string, ancestors: string[] = []) => {\r\n    if (!Array.isArray(ancestors)) {\r\n      ancestors = [];\r\n    }\r\n\r\n    ancestors.push(name);\r\n    visited[name] = true;\r\n\r\n    graph[name].forEach((dep: string) => {\r\n      if (ancestors.indexOf(dep) >= 0) {\r\n        throw new Error(`Circular dependency '${dep}' is required by '${name}': ${ancestors.join(' -> ')}`);\r\n      }\r\n\r\n      if (visited[dep]) {\r\n        return;\r\n      }\r\n\r\n      visit(dep, ancestors.slice(0));\r\n    });\r\n\r\n    if (sorted.indexOf(name) < 0) {\r\n      sorted.push(name);\r\n    }\r\n  };\r\n\r\n  Object.keys(graph).forEach(k => visit(k));\r\n\r\n  return sorted.reverse();\r\n}\r\n\r\n/**\r\n * Returns if the parameter is a object or not.\r\n *\r\n * @ignore\r\n */\r\nexport function isObject(obj) {\r\n  return (typeof obj === 'object' && obj !== null) || typeof obj === 'function';\r\n}\r\n",
    "import { InjectionToken } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport const ROOT_STATE_TOKEN = new InjectionToken<any>('ROOT_STATE_TOKEN');\r\nexport const FEATURE_STATE_TOKEN = new InjectionToken<any>('FEATURE_STATE_TOKEN');\r\nexport const META_KEY = 'NGXS_META';\r\nexport const SELECTOR_META_KEY = 'NGXS_SELECTOR_META';\r\n\r\nexport const NGXS_PLUGINS = new InjectionToken('NGXS_PLUGINS');\r\nexport type NgxsPluginConstructor = new (...args: any[]) => NgxsPlugin;\r\nexport type NgxsPluginFn = (state: any, mutation: any, next: NgxsNextPluginFn) => any;\r\n\r\n/**\r\n * The NGXS config settings.\r\n */\r\nexport class NgxsConfig {\r\n  /**\r\n   * Run in development mode. This will add additional debugging features:\r\n   * - Object.freeze on the state and actions to guarantee immutability\r\n   * (default: false)\r\n   */\r\n  developmentMode: boolean;\r\n}\r\n\r\n/**\r\n * State context provided to the actions in the state.\r\n */\r\nexport interface StateContext<T> {\r\n  /**\r\n   * Get the current state.\r\n   */\r\n  getState(): T;\r\n\r\n  /**\r\n   * Reset the state to a new value.\r\n   */\r\n  setState(val: T);\r\n\r\n  /**\r\n   * Patch the existing state with the provided value.\r\n   */\r\n  patchState(val: Partial<T>);\r\n\r\n  /**\r\n   * Dispatch a new action and return the dispatched observable.\r\n   */\r\n  dispatch(actions: any | any[]): Observable<void>;\r\n}\r\n\r\nexport type NgxsNextPluginFn = (state: any, mutation: any) => any;\r\n\r\n/**\r\n * Plugin interface\r\n */\r\nexport interface NgxsPlugin {\r\n  /**\r\n   * Handle the state/action before its submitted to the state handlers.\r\n   */\r\n  handle(state: any, action: any, next: NgxsNextPluginFn): any;\r\n}\r\n\r\n/**\r\n * Options that can be provided to the store.\r\n */\r\nexport interface StoreOptions<T> {\r\n  /**\r\n   * Name of the state. Required.\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * Default values for the state. If not provided, uses empty object.\r\n   */\r\n  defaults?: T;\r\n\r\n  /**\r\n   * Sub states for the given state.\r\n   */\r\n  children?: any[];\r\n}\r\n\r\n/**\r\n * Actions that can be provided in a action decorator.\r\n */\r\nexport interface ActionOptions {\r\n  /**\r\n   * Cancel the previous uncompleted observable(s).\r\n   */\r\n  cancelUncompleted?: boolean;\r\n}\r\n\r\n/**\r\n * On init interface\r\n */\r\nexport interface NgxsOnInit {\r\n  ngxsOnInit(ctx?: StateContext<any>): void | any;\r\n}\r\n\r\nexport type NgxsLifeCycle = Partial<NgxsOnInit>;\r\n"
  ],
  "names": [
    "tslib_1.__values",
    "tslib_1.__spread",
    "tslib_1.__extends"
  ],
  "mappings": "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"
}
